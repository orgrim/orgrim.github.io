<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debian on code. grind. sleep.</title>
    <link>https://www.orgrim.net/tags/debian/</link>
    <description>code. grind. sleep. (debian)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Mon, 04 Jul 2011 00:00:00 +0000</lastBuildDate>
    
    <atom:link href="https://www.orgrim.net/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Configuration réseau pour virtualiser chez OVH</title>
      <link>https://www.orgrim.net/post/2011-07-04-configuration-reseau-pour-virtualiser-chez-ovh/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-07-04-configuration-reseau-pour-virtualiser-chez-ovh/</guid>
      <description>&lt;p&gt;Sur mon serveur chez OVH, j&amp;rsquo;ai un ensemble de machines virtuelles KVM et
(bientôt) de conteneurs LXC. Pour fournir du réseau à tout ce petit
monde, j&amp;rsquo;utilise de l&amp;rsquo;IPv4 et de l&amp;rsquo;IPv6, voici comment c&amp;rsquo;est configuré.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;IPv4, on a un nombre limité d&amp;rsquo;IP publiques parce que ça vaut de
la thune et que ça va être de plus en tendu de multiplier les adresses,
il nous faut un réseau privé (beurk), du NAT (rebeurk) et des
redirections à base d&amp;rsquo;iptables (re-rebeurk). Il nous faut surtout un
bridge, c&amp;rsquo;est une Debian donc ça se passe dans
&lt;code&gt;/etc/network/interfaces&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auto lo
iface lo inet loopback

auto eth0
iface eth0 inet manual

auto br0
iface br0 inet static
        bridge_ports eth0
        bridge_fd 0
        bridge_maxwait 0
        address 188.165.205.xxx
        netmask 255.255.255.0
        network 188.165.205.0
        broadcast 188.165.205.255
        gateway 188.165.205.254
        post-up iptables -t nat -A POSTROUTING -s 10.42.0.0/24 -o br0 -j SNAT --to 188.165.205.xxx
        pre-down iptables -t nat -D POSTROUTING -s 10.42.0.0/24 -o br0 -j SNAT --to 188.165.205.xxx

iface br0 inet6 static
        address 2001:41D0:xxxx:96ce::1
        netmask 64

auto br0:0
iface br0:0 inet static
        address 10.42.0.1
        netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour le bridge, on met l&amp;rsquo;IPv4 publique et une règle iptable pour NAT-er
ce qui sort. Le réseau privé est 10.42.0.0/24, on peut bien sûr choisir
ce qu&amp;rsquo;on veut dans ce que fourni la RFC 1918.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;IPv6, chez OVH c&amp;rsquo;est bizarre : il fournissent un prefix 64 bit et
avec une route accessible sur le /56 incluant, mais pas à partir du /64.
Il faut donc ruser de la façon suivante niveau routage.&lt;/p&gt;
&lt;p&gt;On assigne l&amp;rsquo;IPv6 avec le prefix /64, c&amp;rsquo;est plus propre, sinon le kernel se plaint avec /56 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 addr add 2001:41D0:xxxx:96ce::1/64 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On met une route pour atteindre la gateway dans le /56 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 route add 2001:41d0:xxxx:96ce::/56 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On met la route par défaut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 route add default via 2001:41d0:xxxx:96ff:ff:ff:ff:ff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour avoir cette configuration appliquée automatiquement, il faut créer
&lt;code&gt;/etc/network/if-up.d/ovh-ipv6-route&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$IFACE&amp;quot; = &amp;quot;br0&amp;quot; ]; then
    ip -6 route add 2001:41d0:2:96ce::/56 dev br0
    ip -6 route add default via 2001:41d0:2:96ff:ff:ff:ff:ff
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et pour l&amp;rsquo;arrêt, &lt;code&gt;/etc/network/if-down.d/ovh-ipv6-route&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$IFACE&amp;quot; = &amp;quot;br0&amp;quot; ]; then
    ip -6 route del default via 2001:41d0:2:96ff:ff:ff:ff:ff
    ip -6 route del 2001:41d0:2:96ce::/56 dev br0
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il faut ensuite activer le forward entre interfaces, sinon pas de
routage vers les VM, dans &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv6.conf.all.forwarding=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, le routage chez OVH ne permet pas d&amp;rsquo;intercaler un routeur pour
découper le /64, il faut donc ruser avec du proxy NDP (Neighbor
Discovery Protocol).&lt;/p&gt;
&lt;p&gt;On active le proxy NDP, dans &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv6.conf.all.proxy_ndp=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On ajoute les IP à proxiser, celle de la gateway et chacune des IP
fournies aux VM :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip neigh add proxy 2001:41d0:xxxx:96ff:ff:ff:ff:ff dev br0
# ip neigh add proxy 2001:41d0:xxxx:96ce::2 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En cas de reboot d&amp;rsquo;une VM, il faut d&amp;rsquo;abord virer ses IP du proxy, puis
les remettre, sinon le kernel de la VM se plein d&amp;rsquo;une duplication
d&amp;rsquo;adresse :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip neigh del proxy 2001:41d0:xxxx:96ce::2 dev br0
-&amp;gt; reboot de la VM
# ip neigh add proxy 2001:41d0:xxxx:96ce::2 dev br0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Dual boot Debian/NetBSD</title>
      <link>https://www.orgrim.net/post/2011-02-23-dual-boot-debiannetbsd/</link>
      <pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-23-dual-boot-debiannetbsd/</guid>
      <description>&lt;p&gt;L&amp;rsquo;installation d&amp;rsquo;un dual boot Linux/BSD est somme toute assez simple, on
coupe le disque en deux et on installe les systèmes l&amp;rsquo;un après l&amp;rsquo;autre.
La seule difficulté reste sur l&amp;rsquo;installation/configuration des
bootloaders.&lt;/p&gt;
&lt;p&gt;Voici comment j&amp;rsquo;ai installé mon laptop en dual boot Debian/NetBSD.
D&amp;rsquo;abord, quelques principes/astuces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux s&amp;rsquo;installe dans différentes partitions DOS&lt;/li&gt;
&lt;li&gt;NetBSD installe ses partitions à l&amp;rsquo;intérieur d&amp;rsquo;une partition DOS qui
lui est dédiée&lt;/li&gt;
&lt;li&gt;On peut partager la swap entre les deux systèmes&lt;/li&gt;
&lt;li&gt;On installe d&amp;rsquo;abord Linux et on utilise du LVM pour éviter de créer
des partitions étendues&lt;/li&gt;
&lt;li&gt;GRUB sera le boot loader principal et on chainload&amp;rsquo;era le boot
loader de NetBSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Table des partitions DOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: /boot (100Mb) - type Linux&lt;/li&gt;
&lt;li&gt;Part 2: swap (taille de la RAM) - type Swap&lt;/li&gt;
&lt;li&gt;Part 3: LVM (moitié du reste) - type Linux LVM&lt;/li&gt;
&lt;li&gt;Part 4: NetBSD (le reste) - type NetBSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Etapes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Installer Debian (on prend une squeeze avec grub2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installer NetBSD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Booter NetBSD et lancer:
&lt;code&gt;installboot -v /dev/rwd0a /usr/mdec/bootxx_ffsv1&lt;/code&gt; (wd0a est la
partition / et commence au début de la partition DOS allouée à
NetBSD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebooter sur le mode Rescue de Debian:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choisir son root fs et executer un shell dedans&lt;/li&gt;
&lt;li&gt;Monter tous les FS: &lt;code&gt;mount -t ext3 -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Editer &lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt; (voir plus bas) :&lt;/li&gt;
&lt;li&gt;Lancer: &lt;code&gt;grub-install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebooter et vérifier que tout est bien accessible&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;{% highlight bash %}
#!/bin/sh
exec tail -n +3 $0
menuentry &amp;ldquo;NetBSD&amp;rdquo; {
set root=(hd0,4)
chainloader +1
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>