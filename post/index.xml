<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on code. grind. sleep.</title>
    <link>https://www.orgrim.net/post/</link>
    <description>code. grind. sleep. (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr</language>
    <lastBuildDate>Wed, 20 Jan 2021 21:58:54 +0100</lastBuildDate>
    
    <atom:link href="https://www.orgrim.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Installer Go</title>
      <link>https://www.orgrim.net/post/2021-01-20-installer-go/</link>
      <pubDate>Wed, 20 Jan 2021 21:58:54 +0100</pubDate>
      
      <guid>https://www.orgrim.net/post/2021-01-20-installer-go/</guid>
      <description>&lt;p&gt;Le langage Go est de plus en plus présent, on peut installer son
compilateur et suite d&amp;rsquo;outil à partir des packages de sa distribution,
mais le plus simple pour avoir une version la plus à jour possible est
d&amp;rsquo;utiliser les binaires compilés fournis sur le site officiel.&lt;/p&gt;
&lt;p&gt;Le version du package golang-go est trop ancienne dans Debian stable
(1.11), je l&amp;rsquo;ai donc installé de la façon suivante.&lt;/p&gt;
&lt;p&gt;Aller sur &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt; pour trouver la dernière version
stable. Pour la suite, on prend l&amp;rsquo;exemple de la version 1.15.7&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ mkdir -p ~/install
$ cd ~/install
$ wget https://golang.org/dl/go1.15.7.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Recopier le checksum dans &lt;code&gt;go1.15.7.linux-amd64.tar.gz.sha256&lt;/code&gt; dans un
format qui convient à &lt;code&gt;sha256sum&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0d142143794721bb63ce6c8a6180c4062bcf8ef4715e7d6d6609f3a8282629b3  go1.15.7.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Vérifier le checksum :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sha256sum -c go1.15.7.linux-amd64.tar.gz.sha256
go1.15.7.linux-amd64.tar.gz: OK
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Préparer le répertoire d&amp;rsquo;installation :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cd /usr/local/
$ sudo rm -f go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Extraire l&amp;rsquo;archive :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo tar xf ~/install/go1.15.7.linux-amd64.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Versionner le répertoire et créer un lien symbolique :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo mv go go1.15.7
$ sudo ln -s go1.15.7 go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Ajouter à son &lt;code&gt;~/.bashrc&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=$PATH:/usr/local/go/bin:$HOME/go/bin
export PATH
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Le sourcer et vérifier la version :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ . ~/.bashrc
$ go version
go version go1.15.7 linux/amd64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On peut alors purger les anciennes versions de go dans &lt;code&gt;/usr/local&lt;/code&gt; ou
revenir en arrière grâce au lien symbolique.&lt;/p&gt;
&lt;p&gt;On utilise la configuration par défaut de l&amp;rsquo;environnement de Go pour
l&amp;rsquo;installation des binaires et modules avec &lt;code&gt;go get&lt;/code&gt; dans &lt;code&gt;~/go&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuration de PostgreSQL dans un cluster Patroni</title>
      <link>https://www.orgrim.net/post/2021-01-07-configuration-de-postgresql-avec-patroni/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2021-01-07-configuration-de-postgresql-avec-patroni/</guid>
      <description>&lt;p&gt;When Patroni operates some replicated PostgreSQL instances, it takes
over some configuration parameters to ensure they remains consistent
within the cluster.&lt;/p&gt;
&lt;p&gt;Some configuration parameters are controled by Patroni&lt;/p&gt;
&lt;p&gt;Certains paramètres sont contrôlés par Patroni au niveau de la ligne
de commande de démarrage de l&amp;rsquo;instance, on ne peut que les modifier
via patronictl. Pour déterminer les paramètres contrôlés par Patroni,
vérifier :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dans /etc/patroni/patroni-12-main.yml, section postgresql.parameters&lt;/li&gt;
&lt;li&gt;Avec patronictl show-config&lt;/li&gt;
&lt;li&gt;Il n&amp;rsquo;est pas sur la ligne de commande de l&amp;rsquo;instanec (ps auxfww | grep postgres)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour les paramètres avec redémarrage non contrôlés par Patroni :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modifier le paramètre dans $PGDATA/postgresql.base.conf sur tous les nœuds&lt;/li&gt;
&lt;li&gt;Redémarrer avec patronictl (voir plus loin).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour les paramètres avec redémarrage contrôlés par Patroni :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Exécuter patronictl -c /etc/patroni/patroni-12-{instance}.yml edit-config -p &amp;lsquo;parametre=valeur&amp;rsquo; pour les modifier au niveau du DCS (etcd)&lt;/li&gt;
&lt;li&gt;Redémarrer avec patronictl (voir plus loin).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour les paramètres sans redémarrage :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modifier le paramètre dans $PGDATA/postgresql.base.conf sur tous les nœuds&lt;/li&gt;
&lt;li&gt;Recharger la configuration via la fonction pg_reload_conf() sur chaque nœud impacté ou demander à Patroni de le faire pour tout le cluster : patronictl -c /etc/patroni/patroni-12-{instance}.yml reload cluster_name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour les paramètres avec redémarrage, redémarrer les instances :&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Vérifier l&amp;rsquo;état de la colonne &amp;ldquo;Pending restart&amp;rdquo; de la sortie de patronictl -c /etc/patroni/patroni-12-{instance}.yml list&lt;/li&gt;
&lt;li&gt;Redémarrer les instances standby : patronictl -c /etc/patroni/patroni-12-{instance}.yml restart cluster_name member_name&lt;/li&gt;
&lt;li&gt;Soit :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Effectuer un switchover pour redémarrer l&amp;rsquo;instance primaire (Leader) : patronictl -c /etc/patroni/patroni-12-{instance}.yml switchover&lt;/li&gt;
&lt;li&gt;Redémarrer avec patronictl : patronictl -c /etc/patroni/patroni-12-{instance}.yml restart cluster_name member_name&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, l&amp;rsquo;ordre de redémarrage des instances selon qu&amp;rsquo;elles soient primaire ou standby est important pour les paramètres suivants, où la valeur doit être supérieure ou égale sur le standby :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max_connections&lt;/li&gt;
&lt;li&gt;max_prepared_transactions&lt;/li&gt;
&lt;li&gt;max_locks_per_transaction&lt;/li&gt;
&lt;li&gt;max_wal_senders&lt;/li&gt;
&lt;li&gt;max_worker_processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note : pour modifier un paramètre et garantir que la même valeur soit configurée sur l&amp;rsquo;ensemble du cluster, utiliser patronictl edit-config est la méthode la plus simple. Par contre, il faut continuer à utiliser cette méthode par la suite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Memento Cloud Init</title>
      <link>https://www.orgrim.net/post/2020-07-28-memento-cloud-init/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2020-07-28-memento-cloud-init/</guid>
      <description>&lt;p&gt;Cloud Init permet de configurer des machines virtuelles au boot, en utilissant des méta données provenant de la plateforme ou tourne la VM (AWS, Azure, GCP, KVM Local, etc). Pour une installation sur KVM avec libvirt, il faut utiliser le module NoCloud :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Installer le système dans un KVM, avec &lt;code&gt;virt-manager&lt;/code&gt; et une image ISO&lt;/li&gt;
&lt;li&gt;Installer le paquet &lt;code&gt;cloud-init&lt;/code&gt; (et le paquet &lt;code&gt;sudo&lt;/code&gt; pour que le reste fonctionne)&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;# yum install cloud-init sudo
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Eteindre la VM&lt;/li&gt;
&lt;li&gt;Créer un répertoire de travail et s&amp;rsquo;y déplacer&lt;/li&gt;
&lt;li&gt;Créer les 3 fichiers :&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user-data&lt;/code&gt; : contient la configuration pour ajouter son user, sa clé SSH, configurer sudo, configurer le mot de passe &lt;code&gt;root&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meta-data&lt;/code&gt; : contient la configuration de la machine, le hostname, etc&lt;/li&gt;
&lt;li&gt;&lt;code&gt;network-config&lt;/code&gt; : contient la configuration du réseau&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Créer l&amp;rsquo;image ISO :&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ genisoimage -output cloudinit_la_vm.iso -volid cidata -joliet -rock user-data meta-data network-config
&lt;/code&gt;&lt;/pre&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Attacher l&amp;rsquo;image ISO&lt;/li&gt;
&lt;li&gt;Démarrer la VM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Voici les fichiers à placer dans l&amp;rsquo;image ISO pour avoir le minimum pour finir la configuration de la VM avec Ansible ou autre par la suite :&lt;/p&gt;
&lt;p&gt;Fichier &lt;code&gt;user-data&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;c&#34;&gt;#cloud-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# vim: syntax=yaml&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# https://cloudinit.readthedocs.io/en/latest/topics/examples.html&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;chpasswd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;sd&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;root&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Un mot de passe complexe&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Change me&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;expire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;orgrim&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# Change me&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ssh_authorized_keys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;ssh-rsa AA...= orgrim@hw&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sudo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ALL=(ALL) NOPASSWD:ALL&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/bin/bash&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;groups&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;users&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fichier &lt;code&gt;meta-data&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;local-hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;centos77.vz.lo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Fichier &lt;code&gt;network-config&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;ethernets&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;eth0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;eth0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;addresses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;- &lt;span class=&#34;m&#34;&gt;10.100.0.59&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/24&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;gateway4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.100.0.1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;nameservers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;l&#34;&gt;vz.lo]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;addresses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;10.100.0.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;La machine est configurée avec le hostname &lt;code&gt;centos77.vz.lo&lt;/code&gt;, son IP, la gateway, le DNS qui vont bien et un user avec accès root et sa clé SSH pour pouvoir utiliser Ansible pour la suite de la configuration.&lt;/p&gt;
&lt;p&gt;La configuration placée dans l&amp;rsquo;image ISO est appliquée à chaque boot.&lt;/p&gt;
&lt;p&gt;La documentation : &lt;a href=&#34;https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html&#34;&gt;https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gestion des utilisateurs pgBouncer avec auth_query</title>
      <link>https://www.orgrim.net/post/2017-10-30-gestion-des-utilisateurs-pgbouncer-avec-auth-query/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2017-10-30-gestion-des-utilisateurs-pgbouncer-avec-auth-query/</guid>
      <description>&lt;p&gt;Avec pgBouncer 1.6 sont arrivés deux nouveaux paramètres, &lt;code&gt;auth_user&lt;/code&gt; et
&lt;code&gt;auth_query&lt;/code&gt;, qui permettent de faciliter la gestion du fichier des
utilisateurs. Le fichier des utilisateurs contient les couples
utilisateur / mot de passe hashé pour s&amp;rsquo;authentifier à la place de
l&amp;rsquo;utilisateur final sur le serveur PostgreSQL. Il y a deux problèmes
majeurs avec ce fichier utilisateur : son maintien fastidieux et le
risque de collision entre noms de roles identiques mais avec des mots
de passe différents si le même pgBoucner accède à plusieurs instances
PostgreSQL.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;auth_query&lt;/code&gt; permet de définir une requête à exécuter pour obtenir le
couple utilisateur / mot de passe de l&amp;rsquo;instance lorsqu&amp;rsquo;ils sont
introuvables dans le fichier.&lt;/p&gt;
&lt;p&gt;Pour se connecter à l&amp;rsquo;instance PostgreSQL et exécuter la requête,
pgBouncer utilise la valeur de &lt;code&gt;auth_user&lt;/code&gt; comme nom d&amp;rsquo;utilisateur. Si
PostgreSQL demande un mot de passe, pgBouncer utilise celui défini
dans le fichier des utilisateurs. On peut utiliser un utilisateur
commun à toutes les instances, qu&amp;rsquo;il faut alors créer sur chaque
instance, ou ajouter le paramètre &lt;code&gt;auth_user&lt;/code&gt; au niveau de la définir
de l&amp;rsquo;accès à la base de données dans la section [databases].&lt;/p&gt;
&lt;p&gt;Enfin, l&amp;rsquo;utilisateur &lt;code&gt;auth_user&lt;/code&gt; doit pouvoir lire le contenu de
&lt;code&gt;pg_shadow&lt;/code&gt; pour obtenir les mots de passe hashés, il est alors
recommandé de créer une fonction dans chaque base de données accédée
par pgBouncer sur l&amp;rsquo;instance cible. Sinon, il faut donner accès à
&lt;code&gt;pg_shadow&lt;/code&gt; par un &lt;code&gt;GRANT&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Concrètement cela donne, dans &lt;code&gt;/etc/pgbouncer/pgbouncer.ini&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span class=&#34;k&#34;&gt;[pgbouncer]&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;; ...&lt;/span&gt;

&lt;span class=&#34;na&#34;&gt;auth_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;md5&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;auth_file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/pgbouncer/userlist.txt&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; si on choisit de faire un GRANT sur pg_shadow&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;auth_query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;SELECT usename, passwd FROM pg_shadow WHERE usename=$1&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;; si on choisit de créer la fonction donnée dans la doc de pgBouncer&lt;/span&gt;
&lt;span class=&#34;na&#34;&gt;auth_query&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;SELECT pgbouncer.user_lookup($1)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sur l&amp;rsquo;instance PostgreSQL, pour créer l&amp;rsquo;utilisateur pgbouncer chargé
d&amp;rsquo;exécuter l&amp;rsquo;auth_query :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ROLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WITH&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PASSWORD&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;le mot de passe&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;usename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_shadow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pgbouncer&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Créer le fichier &lt;code&gt;/etc/pgbouncer/userlist.txt&lt;/code&gt; et mettre le résultat du SELECT sous cette forme :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;pgbouncer&amp;quot; &amp;quot;md5ac0b6e3b0d0904c0b602607e36c256eb&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si on choisit de faire un GRANT sur &lt;code&gt;pg_shadow&lt;/code&gt;, faire cette opération
dans toutes les bases de données accédées via pgBouncer :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_shadow&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sinon exécuter le script SQL suivant dans toutes les bases de données
accédées via pgBouncer, c&amp;rsquo;est la fonction donnée dans la doc avec la
création du schéma en plus :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SCHEMA&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;REVOKE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SCHEMA&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;USAGE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SCHEMA&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;OR&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;REPLACE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FUNCTION&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_lookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i_username&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uname&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phash&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;RETURNS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;record&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;usename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;passwd&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_catalog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_shadow&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;usename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i_username&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;INTO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;uname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;RETURN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;END&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;$$&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LANGUAGE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plpgsql&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SECURITY&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFINER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;REVOKE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FUNCTION&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_lookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;GRANT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;EXECUTE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FUNCTION&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_lookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgbouncer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On peut ajouter la fonction ou le &lt;code&gt;GRANT&lt;/code&gt; à &lt;code&gt;template1&lt;/code&gt; pour les futures bases de données.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Configuration de pgBouncer avec des connexions TLS</title>
      <link>https://www.orgrim.net/post/2017-10-27-configuration-de-pgbouncer-avec-des-connexions-tls/</link>
      <pubDate>Fri, 27 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2017-10-27-configuration-de-pgbouncer-avec-des-connexions-tls/</guid>
      <description>&lt;p&gt;Un petit howto pour créer des certificats et les utiliser avec PostgreSQL et pgBouncer.&lt;/p&gt;
&lt;h2 id=&#34;autorité-de-certification-avec-easyrsa&#34;&gt;Autorité de certification avec EasyRSA&lt;/h2&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Télécharger et installer la dernière version de EasyRSA. La version 3
est différente de la version 2, fournie dans Debain Stretch.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.3/EasyRSA-3.0.3.tgz
tar xzf EasyRSA-3.0.3.tgz
cd EasyRSA-3.0.3
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;création-de-lautorité-de-certification&#34;&gt;Création de l&amp;rsquo;autorité de certification&lt;/h3&gt;
&lt;p&gt;Créer un fichier de configuration :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp vars.example vars
vi vars
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Changer quelques informations :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set_var EASYRSA_REQ_COUNTRY	&amp;quot;FR&amp;quot;
set_var EASYRSA_REQ_PROVINCE	&amp;quot;Ile-de-France&amp;quot;
set_var EASYRSA_REQ_CITY	&amp;quot;Paris&amp;quot;
set_var EASYRSA_REQ_ORG		&amp;quot;MyOrg&amp;quot;
set_var EASYRSA_REQ_EMAIL	&amp;quot;admin@myorg.lo&amp;quot;
set_var EASYRSA_REQ_OU		&amp;quot;Clients&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Créer l&amp;rsquo;autorité :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./easyrsa init-pki
./easyrsa build-ca
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il faut lui donner un nom, par exemple CA Clients ou PostgreSQL ou un
truc significatif. Il faut aussi saisir un mot de passe pour la clé du
certificat racine, celui qui permet de signer tout le reste.&lt;/p&gt;
&lt;h3 id=&#34;création-des-certificats&#34;&gt;Création des certificats&lt;/h3&gt;
&lt;p&gt;Pour créer un bi-clé pour un serveur :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./easyrsa build-server-full postgresql nopass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si la clé et le certificat du serveur doivent être transmis pas un moyen
peu sécurisé, comme le mail, créer un fichier PKCS#12 plutot qu&amp;rsquo;un tar :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./easyrsa export-p12 postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut mettre un mot de passe au fichier.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./easyrsa build-server-full pgbouncer nopass
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Générer aussi la liste de révocation, qui permet rendre des
certificats invalides.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./easyrsa gen-crl
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;extraction-des-éléments-du-p12&#34;&gt;Extraction des éléments du p12&lt;/h3&gt;
&lt;p&gt;La clé privée :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl pkcs12 -in postgresql.p12 -nocerts -nodes -out postgresql.key
chmod 600 postgresql.key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le certificat :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl pkcs12 -in postgresql.p12 -clcerts -out postgresql.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le certificat de l&amp;rsquo;AC :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl pkcs12 -in postgresql.p12 -cacerts -out ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;configurer-postgresql-pour-le-tls&#34;&gt;Configurer PostgreSQL pour le TLS&lt;/h2&gt;
&lt;p&gt;il faut les fichiers suivants :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pki/ca.crt
pki/crl.pem
pki/issued/postgresql.crt
pki/private/postgresql.key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ou&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pki/crl.pem
pki/private/postgresql.p12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;et extraire le contenu du fichier PKCS#12 (voir plus haut).&lt;/p&gt;
&lt;p&gt;Le plus simple est de placer ces fichiers dans le répertoire $PGDATA,
les chemins dans la configuration sont relatifs à ce répertoire.&lt;/p&gt;
&lt;p&gt;Dans $PGDATA/postgresql.conf, configurer au minimum :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssl = on
ssl_cert_file = &#39;postgresql.crt&#39;
ssl_key_file = &#39;postgresql.key&#39;
ssl_ca_file = &#39;ca.crt&#39;
ssl_crl_file = &#39;crl.pem&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Un reload de la configuration suffit pour prendre en compte les
modifications. Ce paramétrage permet à l&amp;rsquo;instance de chiffrer les
connexions. On définit si la connexion TLS est imposé au clients et
l&amp;rsquo;authentification par certificat dans le fichier pg_hba.conf&lt;/p&gt;
&lt;p&gt;Le TLS ne concerne pas les connections locales par socket unix, géré
par le type &amp;lsquo;local&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Le type &amp;lsquo;host&amp;rsquo;, concerne les connexions en clair ou TLS, utiliser
&amp;lsquo;hostssl&amp;rsquo; ou &amp;lsquo;hostnossl&amp;rsquo; pour distinguer le TLS dans les
autorisations.&lt;/p&gt;
&lt;p&gt;On peut interdire les connexions en clair avec ces deux lignes :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostnossl   all   all   0.0.0.0/0   reject
hostnossl   all   all   ::/0        reject
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Toutes les lignes &amp;lsquo;host&amp;rsquo; suivantes ne concerneront que les connexions
TLS, du fait de l&amp;rsquo;interdiction précédente.&lt;/p&gt;
&lt;h2 id=&#34;configurer-pgbouncer-pour-le-tls&#34;&gt;Configurer pgBouncer pour le TLS&lt;/h2&gt;
&lt;h3 id=&#34;clients&#34;&gt;Clients&lt;/h3&gt;
&lt;p&gt;il faut les fichiers suivants :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pki/ca.crt
pki/crl.pem
pki/issued/postgresql.crt
pki/private/postgresql.key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ou&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pki/crl.pem
pki/private/postgresql.p12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;et extraire le contenu du fichier PKCS#12 (voir plus haut).&lt;/p&gt;
&lt;p&gt;Dans /etc/pgbouncer/pgbouncer.ini, il faut configurer &amp;lsquo;client_tls_sslmode&amp;rsquo; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;disable : n&amp;rsquo;accepte pas les connexions TLS, le paramétrage par défaut&lt;/li&gt;
&lt;li&gt;allow : accepte les connexions TLS et les connexions en clair&lt;/li&gt;
&lt;li&gt;require : n&amp;rsquo;accepte que les connexions TLS&lt;/li&gt;
&lt;li&gt;verify-ca, verify-full : n&amp;rsquo;accepte que les connexions TLS, et demande un certificat au client issue de la même AC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour les chemins vers les fichiers :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client_tls_ca_file = /etc/pgbouncer/ca.crt
client_tls_key_file = /etc/pgbouncer/pgbouncer.key
client_tls_cert_file = /etc/pgbouncer/pgbouncer.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour authentifier les clients avec un certificat, il faut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth_type = cert
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le CN du certificat doit alors être identique au nom d&amp;rsquo;utilisateur de
connexion.&lt;/p&gt;
&lt;p&gt;Cela ne dispense pas de la configuration de l&amp;rsquo;authenfication entre
pgBouncer et PostgreSQL, avec &amp;lsquo;auth_file&amp;rsquo;, voire &amp;lsquo;auth_user&amp;rsquo; et &amp;lsquo;auth_query&amp;rsquo;.&lt;/p&gt;
&lt;h3 id=&#34;backends-postgresql&#34;&gt;Backends PostgreSQL&lt;/h3&gt;
&lt;p&gt;Pour que pgBouncer se connecte aux serveurs PostgreSQL en TLS, dans
/etc/pgbouncer/pgbouncer.ini, il faut configurer :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server_tls_sslmode = require
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si on souhaite que pgBouncer vérifie le certificat de l&amp;rsquo;AC du serveur
PostgreSQL :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server_tls_sslmode = verify-ca
server_tls_ca_file = /etc/pgbouncer/ca.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut enfin configurer pgBouncer et PostgreSQL pour que pgBouncer
s&amp;rsquo;authentifie avec un certificat client, dans /etc/pgbouncer.ini :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server_tls_sslmode = verify-ca
server_tls_ca_file = /etc/pgbouncer/ca.crt
server_tls_key_file = /etc/pgbouncer/pgbouncer_back.key
server_tls_cert_file = /etc/pgbouncer/pgbouncer_back.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le fichier pg_hba.conf devra alors demander un certificat avec
l&amp;rsquo;option clientcert=1 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;hostssl all all ip_pgbouncer/32 md5 clientcert=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On ne peut utiliser la méthode cert uniquement si le CN du certificat
client de pgBouncer est identique au nom de l&amp;rsquo;utilisateur qui se
connecte. Ainsi, on ne peut plus utiliser qu&amp;rsquo;un seul nom d&amp;rsquo;utilisateur
pour les accès à PostgreSQL, dans ce cas là il vaut mieux forcer le
nom d&amp;rsquo;utilisateur dans la section [database].&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Réflexions sur l&#39;archivage des fichiers WAL</title>
      <link>https://www.orgrim.net/post/2015-12-30-reflexions-sur-larchivage-des-fichiers-wal/</link>
      <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2015-12-30-reflexions-sur-larchivage-des-fichiers-wal/</guid>
      <description>&lt;p&gt;PostgreSQL faisant son bonhomme de chemin, on se retrouve désormais
avec des configurations où il faut archiver plusieurs fois les WAL
parce qu&amp;rsquo;on a de la sauvegarde PITR et de la réplication.&lt;/p&gt;
&lt;p&gt;Le plus gros piège lorsqu&amp;rsquo;on a du PITR et de la réplication, ou
plusieurs serveurs standby, c&amp;rsquo;est d&amp;rsquo;oublier que chaque élément de
l&amp;rsquo;architecture qui consomme du WAL doit avoir son propre répertoire de
WAL archivés, car chacun purge les fichiers différemment.&lt;/p&gt;
&lt;p&gt;On tombe dans le piège facilement, en se disant, &amp;ldquo;pas de problème pour
la purge des vieux fichiers, c&amp;rsquo;est le PITR ou le slave le plus éloigné
qui purgera&amp;rdquo;. Si la purge du PITR passe alors que le standby était
déconnecté du maitre, cette purge peut casser la réplication.&lt;/p&gt;
&lt;p&gt;La solution est d&amp;rsquo;archiver plusieurs fois le même fichier WAL. Pour
optimiser, le plus efficace à l&amp;rsquo;usage est d&amp;rsquo;utiliser des
hardlinks. En gros, on archive une fois le fichier WAL et on crée
autant de lien hard qu&amp;rsquo;il faut pour les autres consommateurs de WAL
archivés. Rappelons, que la donnée n&amp;rsquo;est supprimée que lorsqu&amp;rsquo;il
n&amp;rsquo;existe plus aucun lien et que plus aucun processus n&amp;rsquo;a le fichier
ouvert, à ne pas confondre avec un lien symbolique.&lt;/p&gt;
&lt;p&gt;Pour archiver vite, il vaut mieux éviter de compresser et stocker les
archives soit en local, soit sur un partage NFS, l&amp;rsquo;archivage par SSH
restant le plus lent. Tout est compromis entre chiffrage des
communications sur le réseau et espace disque disponible, les liens
hard restant rapides à créer et avec une consommation d&amp;rsquo;espace disque
supplémentaire négligeable.&lt;/p&gt;
&lt;p&gt;Enfin, PostgreSQL exécute la commande d&amp;rsquo;archivage avec l&amp;rsquo;appel
&lt;code&gt;system()&lt;/code&gt; qui fork un shell : toutes les possibilités du shell sont
alors disponibles, par exemple :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;archive_command = &#39;rsync -a %p slave1:/archived_xlog/slave1/%f &amp;amp;&amp;amp; ssh slave1 &amp;quot;for h in slave2 pitr; do ln /archived_xlog/slave1/%f /archived_xlog/$h/%f; done&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oui, une boucle et une seule copie avec rsync par SSH pour 3
utilisations. On préfèrera surement faire un script pour rendre les
choses plus lisibles. Ça marche aussi pour &lt;code&gt;restore_command&lt;/code&gt; et
&lt;code&gt;archive_cleanup_command&lt;/code&gt; dans &lt;code&gt;recovery.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;restore_command = &#39;cp /archived_xlog/$(hostname)/%f %p&#39;
archive_cleanup_command = &#39;pg_archivecleanup /archived_xlog/$(hostname) %r&#39;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pg_back le script de base pour sauvegarder PostgreSQL</title>
      <link>https://www.orgrim.net/post/2015-03-12-pg-back-le-script-de-base-pour-sauvegarder-postgresql/</link>
      <pubDate>Thu, 12 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2015-03-12-pg-back-le-script-de-base-pour-sauvegarder-postgresql/</guid>
      <description>&lt;p&gt;Il y a fort longtemps, et c&amp;rsquo;est ma première contribution relative à
PostgreSQL, j&amp;rsquo;ai écrit un script de backup qui dump tout un serveur
PostgreSQL avec &lt;code&gt;pg_dump&lt;/code&gt; et &lt;code&gt;pg_dumpall&lt;/code&gt;. Il s&amp;rsquo;agit de pg_back.&lt;/p&gt;
&lt;p&gt;Cela peut paraître curieux de publier un simple script de sauvegarde
que tout DBA PostgreSQL a écrit dans sa vie et sait écrire par
cœur. Surtout qu&amp;rsquo;on le réécrit en permanence ce script, pour ajuster
des chemins, des cas particuliers du serveur à sauvegarder et de
l&amp;rsquo;environnement où l&amp;rsquo;on sauvegarde&amp;hellip;&lt;/p&gt;
&lt;p&gt;En bien justement, c&amp;rsquo;est parce qu&amp;rsquo;on le réécrit tout le temps que
pg_back fait gagner du temps. Il est simple et court, facilement
lisible, c&amp;rsquo;est du shell : tout ce qu&amp;rsquo;il faut pour en faire une bonne
base pour créer un script de sauvegarde adapté. Quand on l&amp;rsquo;utilise
comme patron pour en faire un outil plus évolué, on gagne du temps.&lt;/p&gt;
&lt;p&gt;Justement rajouter du code pour l&amp;rsquo;adapter peut se faire au début. Si
on n&amp;rsquo;a pas envie d&amp;rsquo;utiliser le fichier de configuration, on adapte la
liste de variables au début du script, quitte à en rajouter.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;autre endroit intéressant c&amp;rsquo;est tout à la fin, avant le &lt;code&gt;exit&lt;/code&gt;, on
peut rajouter tout ce qu&amp;rsquo;il faut pour externaliser ses sauvegardes.&lt;/p&gt;
&lt;p&gt;C&amp;rsquo;est par &lt;a href=&#34;https://github.com/orgrim/pg_back&#34;&gt;ici&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Confiner PostgreSQL avec SELinux</title>
      <link>https://www.orgrim.net/post/2014-09-22-confiner-postgresql-avec-selinux/</link>
      <pubDate>Mon, 22 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2014-09-22-confiner-postgresql-avec-selinux/</guid>
      <description>&lt;style type=&#34;text/css&#34;&gt;.notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative}&lt;/style&gt;
&lt;svg width=&#34;0&#34; height=&#34;0&#34; display=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;symbol id=&#34;tip-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;note-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;warning-notice&#34; viewBox=&#34;0 0 576 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;info-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z&#34;/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;div class=&#34;notice note&#34; &gt;
&lt;p class=&#34;first notice-title&#34;&gt;&lt;span class=&#34;icon-notice baseline&#34;&gt;&lt;svg&gt;&lt;use href=&#34;#note-notice&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;Remarque&lt;/p&gt;&lt;p&gt;Ce post est partiellement obsolète, avec le passage à systemd.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;J&amp;rsquo;avais déjà expérimenté un peu avec SELinux il y a deux ans sans
aller trop loin, parce que j&amp;rsquo;entendais souvent la phrase &amp;ldquo;Si on veut
de la sécurité, il faut SELinux&amp;rdquo; et surtout à cause de l&amp;rsquo;arrivée de
l&amp;rsquo;extension &lt;code&gt;sepgsql&lt;/code&gt; dans les modules contrib de PostgreSQL. Ça avait
donné une conf pour le Fosdem où finalement, j&amp;rsquo;ai plus parlé des
privilèges classiques que de SELinux.&lt;/p&gt;
&lt;p&gt;Suite à une demande au ${BOULOT}, je me suis replongé dedans, et les
choses ont peu évolué. Dans la majorité des recherches que j&amp;rsquo;ai pu
faire, SELinux reste tout de même un truc qui se met en travers la
route, c&amp;rsquo;est-à-dire, qu&amp;rsquo;il y a toujours plus de résultats sur comment
le désactiver plutôt que configurer les choses correctement. Ensuite,
certains proposent de faire aveuglement confiance à &lt;code&gt;setroubleshoot&lt;/code&gt;
et &lt;code&gt;audit2allow&lt;/code&gt; pour faire taire la bête. Enfin, j&amp;rsquo;ai dû trouver une
page ou deux après en deux semaines à temps plein sur le sujet qui
parlent de comment confiner un utilisateur dans le but d&amp;rsquo;implémenter ce
que promet SELinux et que toutes les entreprises demandent : le RBAC,
Role Based Access Control, ou comment donner le moins de droits
possibles aux sous-traitants qui hébergent les serveurs.&lt;/p&gt;
&lt;p&gt;Cette fois ci, je suis allé plus loin. Déjà, je suis parti sur une
installation de CentOS 6, la famille de distribution
RHEL/CentOS/Fedora semble être la plus en avance par rapport à
SELinux : à peu près tous les services/daemons fournis dans l&amp;rsquo;install
sont confinés par SELinux. Les utilisateurs ne le sont pas au login,
il n&amp;rsquo;y a donc aucune configuration de RBAC. On verra peut-être ça plus
tard, j&amp;rsquo;ai pas encore obtenu de résultat satisfaisant sur ce sujet, et
il vaut mieux expliquer comment confiner correctement PostgreSQL avant
de passer aux roles. Tout simplement, parce qu&amp;rsquo;il est très simple de
casser ce confinement avec la configuration par défaut de RHEL, grâce
à &lt;code&gt;pg_ctl&lt;/code&gt;. Enfin, l&amp;rsquo;installation des paquets du PGDG n&amp;rsquo;est pas
confinée par défaut, il manque les file contexts adaptés aux chemins
particuliers de ces paquets, prévu pour faire cohabiter plusieurs
versions majeures ; ce qui ne correspond pas ce qu&amp;rsquo;à prévu Red Hat
pour PostgreSQL.&lt;/p&gt;
&lt;p&gt;Après cette longue introduction, mais avant de commencer, il faut
savoir administrer un minumum SELinux : si vous ne savez pas qu&amp;rsquo;il
existe des options &lt;code&gt;-Z&lt;/code&gt;, ce que sont les contexts, les types et les
domaines, mieux vaut d&amp;rsquo;abord se documenter, par exemple &lt;a href=&#34;https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Security-Enhanced_Linux/index.html&#34;&gt;chez Red
Hat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Voici donc les file contexts à ajouter dans un fichier &lt;em&gt;module.te&lt;/em&gt; pour
confiner l&amp;rsquo;installation PostgreSQL du PGDG :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/rc\.d/init\.d/(se)?postgresql(-.*)?    --  gen_context(system_u:object_r:postgresql_initrc_exec_t,s0)
/usr/pgsql-[0-9]+\.[0-9]+/bin/initdb        --  gen_context(system_u:object_r:postgresql_exec_t,s0)
/usr/pgsql-[0-9]+\.[0-9]+/bin/pg_ctl        --  gen_context(system_u:object_r:postgresql_initrc_exec_t,s0)
/usr/pgsql-[0-9]+\.[0-9]+/bin/postgres      --  gen_context(system_u:object_r:postgresql_exec_t,s0)
/usr/pgsql-[0-9]+.[0-9]+/share/locale(/.*)?	    gen_context(system_u:object_r:locale_t,s0)
/usr/pgsql-[0-9]+.[0-9]+/share/man(/.*)?        gen_context(system_u:object_r:man_t,s0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tout d&amp;rsquo;abord, pour l&amp;rsquo;init script et &lt;code&gt;pg_ctl&lt;/code&gt;, on utilise le type
&lt;code&gt;postgresql_initrc_exec_t&lt;/code&gt;, c&amp;rsquo;est ce qui permet de lancer PostgreSQL
dans le domaine confiné &lt;code&gt;postgresql_t&lt;/code&gt; au boot, via l&amp;rsquo;init script, et
manuellement. La méthode la plus propre est de toujours utiliser
l&amp;rsquo;init script, idéalement par l&amp;rsquo;intermédiaire de &lt;code&gt;run_init&lt;/code&gt; pour
démarrer, arrêter ou redémarrer le postmaster. On évite alors de
laisser trainer des choses dans &lt;code&gt;/var/{run,lock}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Les programmes &lt;code&gt;postgres&lt;/code&gt; et &lt;code&gt;initdb&lt;/code&gt; doivent avoir le type
&lt;code&gt;postgresql_exec_t&lt;/code&gt; car ils exécutent le serveur PostgreSQL ; cela
doit se faire dans le domaine &lt;code&gt;postgresql_t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Enfin, on a placé les labels corrects sur les fichiers de traduction
et les pages de man, pour faire plus propre. Ce code source de module
SELinux alors doit être compilé et chargé.&lt;/p&gt;
&lt;p&gt;Cette configuration est reprise dans le module SELinux disponible sur
&lt;a href=&#34;http://github.com/dalibo/selinux-pgsql-pgdg&#34;&gt;github&lt;/a&gt;. On peut aussi l&amp;rsquo;ajouter manuellement avec &lt;code&gt;semanage&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;semanage fcontext -a -t postgresql_initrc_exec_t &#39;/etc/rc\.d/init\.d/(se)?postgresql(-.*)?&#39;
semanage fcontext -a -t postgresql_exec_t &#39;/usr/pgsql-[0-9]+\.[0-9]+/bin/initdb&#39;
semanage fcontext -a -t postgresql_initrc_exec_t &#39;/usr/pgsql-[0-9]+\.[0-9]+/bin/pg_ctl&#39;
semanage fcontext -a -t postgresql_exec_t &#39;/usr/pgsql-[0-9]+\.[0-9]+/bin/postgres&#39;
semanage fcontext -a -t locale_t &#39;/usr/pgsql-[0-9]+.[0-9]+/share/locale(/.*)?&#39;
semanage fcontext -a -t man_t &#39;/usr/pgsql-[0-9]+.[0-9]+/share/man(/.*)?&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il existe un certain nombre de booleans pour la configuration des
droits SELinux de PostgreSQL, le plus important concerne &lt;code&gt;rsync&lt;/code&gt;,
souvent nécessaire pour faire des base backups. Il s&amp;rsquo;agit de
&lt;code&gt;postgresql_can_rsync&lt;/code&gt;, pour l&amp;rsquo;activer :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;semanage boolean -m --on postgresql_can_rsync
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si on lance l&amp;rsquo;instance sur un port TCP différent de 5432, il faut
l&amp;rsquo;autoriser dans la configuration locale de SELinux :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;semanage port -a -t postgresql_port_t -p tcp &amp;lt;port&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, il ne faut pas oublier d&amp;rsquo;appliquer les contexts aux fichiers
soit avec &lt;code&gt;restorecon&lt;/code&gt;, un relabel complet au reboot ou &lt;code&gt;chcon&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Migration du blog sur github</title>
      <link>https://www.orgrim.net/post/2014-05-28-migration-du-blog-sur-github/</link>
      <pubDate>Wed, 28 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2014-05-28-migration-du-blog-sur-github/</guid>
      <description>&lt;p&gt;Finalement le temps ne me permettant plus d&amp;rsquo;administrer mon serveur
dédié comme il faut, j&amp;rsquo;ai décidé de l&amp;rsquo;abondonner et transférer mes
services ailleurs. Pour le blog et le wiki, j&amp;rsquo;ai choisi de faire un
site/blog github avec jekyll, vu que c&amp;rsquo;est tout prémaché.&lt;/p&gt;
&lt;p&gt;Sur github, l&amp;rsquo;hébergement c&amp;rsquo;est du fichier html, donc statique, on a
plusieurs possibilités pour créer un site :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt; dont github est capable de compiler le résultat à chaque
push du dépôt, mais avec certaines limitations, comme aucun plugin
et la nécessité de créer pas mal de pages pour que ça ressemble à un
blog&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt; qui est une surcouche à jekyll, il faut rtfm et tout de
même faire ses templates, voir un peu de ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getpelican.com&#34;&gt;pelican&lt;/a&gt; qui fait comme octopress à peu prêt mais en python&lt;/li&gt;
&lt;li&gt;plein d&amp;rsquo;autres générateurs de site statiques que j&amp;rsquo;ai surement raté&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L&amp;rsquo;avantage de pelican est dans sa capacité à importer le contenu d&amp;rsquo;un
blog dotclear, et transformer la syntaxe en markdown. Le markdown
semble avoir la cote, beaucoup de générateurs de site l&amp;rsquo;utilisent,
d&amp;rsquo;ailleurs je m&amp;rsquo;y suis mis.&lt;/p&gt;
&lt;p&gt;Comme j&amp;rsquo;avais déjà fait le site de &lt;a href=&#34;http://dalibo.github.io/pitrery/&#34;&gt;pitrery&lt;/a&gt; avec jekyll sur github,
la migration fut plus facile, une fois le dotclear migré grâce à
pelican.&lt;/p&gt;
&lt;p&gt;Au final, j&amp;rsquo;ai maintenant un truc tout simple avec un thème
&lt;a href=&#34;http://getbootstrap.com&#34;&gt;bootstrap&lt;/a&gt;, et le jekyll de base de github est largement suffisant.&lt;/p&gt;
&lt;p&gt;La bonne découverte fut &lt;a href=&#34;http://johnmacfarlane.net/pandoc/&#34;&gt;pandoc&lt;/a&gt;, un super convertisseur de format de
document texte, qui va me servir pour la migration du dokuwiki à base
de :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pandoc -f html -t markdown http://wiki.orgrim.net/page?do=export_html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le mot de la fin, ça demande un peu de boulot de nettoyage manuel,
mais vu le nombre impressionant de posts que j&amp;rsquo;ai pu produire en quatre
ans, c&amp;rsquo;était pas trop méchant.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>modular-xorg, radeon et pas de KMS</title>
      <link>https://www.orgrim.net/post/2013-08-23-modular-xorg-radeon-et-pas-de-kms/</link>
      <pubDate>Fri, 23 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2013-08-23-modular-xorg-radeon-et-pas-de-kms/</guid>
      <description>&lt;p&gt;Il y avait un moment que je n&amp;rsquo;avais pas touché à NetBSD et donc mis à
jour mon lappy avec du pkg frais. Entre temps, la version de X.org
modular, donc issue de pkgsrc, est revenue en 2012, avec son lot de
drivers mis à jour. Le drivers xf86-video-ati, est passé en version
7.1.0, sauf qu&amp;rsquo;il fonctionne uniquement en KMS (Kernel Mode Setting),
chose qu&amp;rsquo;on n&amp;rsquo;a pas encore dans notre kernel.&lt;/p&gt;
&lt;p&gt;Il faut donc la dernière version de la branche 6 du driver, qui contient
encore le support UMS, disponible dans le paquet &lt;code&gt;x11/xf86-video-ati6&lt;/code&gt;,
qui porte le même nom de package, bizarrement. Tout ça est suivi dans le
&lt;a href=&#34;http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=47935&#34;&gt;PR 47935&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Pour que le serveur X trouve le device avec ce driver, j&amp;rsquo;ai du virer la
ligne &lt;code&gt;BusID&lt;/code&gt; dans la section Device du &lt;code&gt;xorg.conf&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Un bulk build par jour dans un screen</title>
      <link>https://www.orgrim.net/post/2013-05-10-un-bulk-build-par-jour-dans-un-screen/</link>
      <pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2013-05-10-un-bulk-build-par-jour-dans-un-screen/</guid>
      <description>&lt;p&gt;Mes packages NetBSD sont préparés par pbulk, qui tourne en continu grâce
au script &lt;a href=&#34;https://github.com/orgrim/nb-utils/blob/master/pkgsrc/pbulk-builder&#34;&gt;pbulk-builder&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;J&amp;rsquo;avais prévu avec l&amp;rsquo;option &lt;code&gt;-1&lt;/code&gt; de lui éviter d&amp;rsquo;entrer dans une boucle
infinie, et j&amp;rsquo;ai pas eu tort. En effet, la majorité des tours ne fait
que mettre à jour l&amp;rsquo;arbre &lt;a href=&#34;http://pkgsrc.org&#34;&gt;pkgsrc&lt;/a&gt;, résoudre les dépendances, sans
rien compiler de nouveau. La première solution que j&amp;rsquo;ai trouvé a été de
créer une règle sieve pour ne pas recevoir des dizaines de mails de
rapport de bulk inutiles, en les plaçant dans un répertoire séparé&amp;hellip;&lt;/p&gt;
&lt;p&gt;N&amp;rsquo;ayant jamais pris le temps d&amp;rsquo;utiliser cette fameuse option one-shot,
j&amp;rsquo;ai décidé de mettre le lancement du bulk dans la crontab, sauf que
c&amp;rsquo;est long et qu&amp;rsquo;il vaut mieux suivre ça avec screen. C&amp;rsquo;est possible
grâce aux options &lt;code&gt;-d&lt;/code&gt; et &lt;code&gt;-m&lt;/code&gt; (avec &lt;code&gt;-S&lt;/code&gt; pour mettre un titre) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0 23 * * * /usr/pkg/bin/screen -dmS bulk -c /root/.screenrc /usr/pkg/bin/bash ~orgrim/nb-utils/pkgsrc/pbulk-builder -c -1 /data/pbulk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut alors attacher le screen quand le bulk tourne.&lt;/p&gt;
&lt;p&gt;PS: merci au fans de tmux de passer sur le chan #netbsdfr sur Freenode
pour me dire comment faire pareil avec tmux :)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oups... des tablespaces imbriqués</title>
      <link>https://www.orgrim.net/post/2013-04-06-oups-des-tablespaces-imbriques/</link>
      <pubDate>Sat, 06 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2013-04-06-oups-des-tablespaces-imbriques/</guid>
      <description>&lt;p&gt;Imbriquer des tablespaces n&amp;rsquo;a pas vraiment de sens dans PostgreSQL
surtout si on veut se prendre la tête avec des montages dans tous les
sens&amp;hellip; Mais bon c&amp;rsquo;est permis, car PostgreSQL utilise uniquement les
liens symboliques dans &lt;code&gt;$PGDATA/pg_tblspc&lt;/code&gt; pour accéder au contenu des
tablespaces.&lt;/p&gt;
&lt;p&gt;Si on veut savoir ce qu&amp;rsquo;il en est voici une requête qui montre ça.&lt;/p&gt;
&lt;p&gt;Pour PostgreSQL &amp;lt;= 9.1 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_settings&lt;/span&gt;
                           &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data_directory&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inside_pgdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spclocation&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_location&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pour PostgreSQL &amp;gt;= 9.2, la colonne &lt;code&gt;spcname&lt;/code&gt; de &lt;code&gt;pg_tablespace&lt;/code&gt; a été
remplacée par la fonction &lt;code&gt;pg_tablespace_location()&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;setting&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_settings&lt;/span&gt;
                                    &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;data_directory&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inside_pgdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;^&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
     &lt;span class=&#34;k&#34;&gt;AND&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace_location&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DESC&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;LIMIT&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent_location&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_tablespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;spcname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;NOT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;IN&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_default&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_global&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On obtient par exemple :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  oid  |   name   |                       location                       | inside_pgdata | parent  |                 parent_location                 
-------+----------+------------------------------------------------------+---------------+---------+-------------------------------------------------
 16399 | inside   | /home/pgsql/postgresql-9.0.10/data/inside            | t             |         | 
 16400 | outside  | /home/pgsql/postgresql-9.0.10/outside                | f             |         | 
 16414 | imbrique | /home/pgsql/postgresql-9.0.10/outside/imbrique       | f             | outside | /home/pgsql/postgresql-9.0.10/outside
 16415 | rimb     | /home/pgsql/postgresql-9.0.10/outside/rimb           | f             | outside | /home/pgsql/postgresql-9.0.10/outside
 16416 | rimbimb  | /home/pgsql/postgresql-9.0.10/outside/rimb/imb       | f             | rimb    | /home/pgsql/postgresql-9.0.10/outside/rimb
 16417 | deuimb   | /home/pgsql/postgresql-9.0.10/outside/rimb/truc/2imb | f             | truc    | /home/pgsql/postgresql-9.0.10/outside/rimb/truc
 16418 | truc     | /home/pgsql/postgresql-9.0.10/outside/rimb/truc      | f             | rimb    | /home/pgsql/postgresql-9.0.10/outside/rimb
(7 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour bien gérer ses tablespaces, l&amp;rsquo;idéal est de faire un répertoire
dédié au même niveau que &lt;code&gt;$PGDATA&lt;/code&gt;, et de créer les tablespaces dedans,
avec un tablespace par répertoire sur un seul niveau :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; /home/pgsql/postgresql-9.2.4
├── data
└── tblspc
    ├── tbs_1
    ├── tbs_2
    ├── ...
    └── tbs_n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&amp;rsquo;est plus propre et on voit tout de suite l&amp;rsquo;utilisation disque avec
&lt;code&gt;df&lt;/code&gt; : parce qu&amp;rsquo;on met des disques différents derrière, bien entendu&amp;hellip;
:)&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pbulk-builder et pkgtools/mksandbox</title>
      <link>https://www.orgrim.net/post/2013-01-26-pbulk-builder-et-pkgtoolsmksandbox/</link>
      <pubDate>Sat, 26 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2013-01-26-pbulk-builder-et-pkgtoolsmksandbox/</guid>
      <description>&lt;p&gt;Après la réinstall d&amp;rsquo;une de mes machines de build en 6.0.1, j&amp;rsquo;ai eu la
bonne surprise de voir que le script de build &lt;code&gt;pbulk-builder&lt;/code&gt;
(&lt;a href=&#34;https://github.com/orgrim/nb-utils&#34;&gt;https://github.com/orgrim/nb-utils&lt;/a&gt;) ne trouvait plus &lt;code&gt;mksandbox&lt;/code&gt;
dans l&amp;rsquo;arbre de pkgsrc. Il est désormais dans son paquet :
&lt;code&gt;pkgtools/mksandbox&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Le script est à jour. le script de montage de la sandbox se prend un
&lt;code&gt;sed&lt;/code&gt; dans la foulée pour éviter qu&amp;rsquo;il force le montage de l&amp;rsquo;arbre
pkgsrc dans &lt;code&gt;/tree/pkgsrc&lt;/code&gt;&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Got GUC?</title>
      <link>https://www.orgrim.net/post/2012-01-25-got-guc/</link>
      <pubDate>Wed, 25 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2012-01-25-got-guc/</guid>
      <description>&lt;p&gt;Les paramètres de configuration de PostgreSQL sont appelés GUC ce qui
signifie Grand Unified Configuration, c&amp;rsquo;est le nom de la partie du code
qui gère les paramètres de configuration. En gros, ce sont tous les
paramètres du fichier &lt;code&gt;postgresql.conf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ce qui est moins connu et utilisé, c&amp;rsquo;est la possibilité de configurer
ces paramètres à différents niveaux :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fichier &lt;code&gt;postgresql.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Ligne de commande du postmaster, le processus principal du serveur&lt;/li&gt;
&lt;li&gt;Base de données&lt;/li&gt;
&lt;li&gt;Rôle&lt;/li&gt;
&lt;li&gt;Rôle sur une base de données&lt;/li&gt;
&lt;li&gt;Session&lt;/li&gt;
&lt;li&gt;Transaction&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;La précédence des valeurs va en descendant dans la liste, par exemple la
valeur d&amp;rsquo;un paramètre au niveau d&amp;rsquo;un rôle écrase celle positionnée au
niveau de la base de donnée ou la ligne de commande. Ce comportement est
très intéressant pour définir une valeur d&amp;rsquo;un paramètre dépendante du
contexte d&amp;rsquo;exécution d&amp;rsquo;un traitement. Par exemple on peut placer un
timeout des requêtes au niveau de la base pour éviter qu&amp;rsquo;une application
ne jette l&amp;rsquo;éponge avant PostgreSQL, et configurer l&amp;rsquo;absence de timeout
pour un rôle dédié aux opérations de VACUUM et ANALYSE, on limite ainsi
l&amp;rsquo;effet de bord du timeout :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;c1&#34;&gt;-- timeout à 30 secondes sur la base de données
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DATABASE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mabase&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statement_timeout&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;30000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;-- pas de timeout pour le role maintenance chargé du vacuum
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ROLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maintenance&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statement_timeout&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TO&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Selon l&amp;rsquo;endroit où doit être positionné la valeur on utilise :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;postgresql.conf&lt;/code&gt; : directement dans le fichier&lt;/li&gt;
&lt;li&gt;ligne de commande : dans le script d&amp;rsquo;init avec l&amp;rsquo;option &lt;code&gt;-c&lt;/code&gt; et à
l&amp;rsquo;exécution de &lt;code&gt;pg_ctl&lt;/code&gt; avec l&amp;rsquo;option &lt;code&gt;-o&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;base de données : &lt;code&gt;ALTER DATABASE nom_base SET param TO valeur;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rôle : &lt;code&gt;ALTER ROLE nom_role SET param TO valeur;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rôle dans une base de données : &lt;code&gt;ALTER ROLE nom_role IN DATABASE nom_base SET param TO valeur;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;session : &lt;code&gt;SET [ SESSION ] param TO valeur;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;transaction : &lt;code&gt;SET LOCAL param TO valeur;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pour le passage des valeurs au niveau SQL, on peut utiliser
&lt;code&gt;RESET param&lt;/code&gt; à la place de &lt;code&gt;SET param TO&lt;/code&gt; pour réinitialiser la
valeur à son défaut pour le contexte choisi.&lt;/p&gt;
&lt;p&gt;Pour les paramètres au niveau des bases de données et des rôle, ces
informations sont stockées dans la table du catalogue système
&lt;code&gt;pg_catalog.pg_db_role_setting&lt;/code&gt;. La commande psql &lt;code&gt;\drds&lt;/code&gt;permet de
facilement afficher son contenu.&lt;/p&gt;
&lt;p&gt;On peut également définir des paramètres personnalisés, comme le font
certaines extensions. Pour cela il faut définir une classe de variables
personnalisée, en déclarant un préfixe (on en sépare plusieurs par des
virgules) dans le paramètre de configuration &lt;code&gt;custom_variable_classes&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;custom_variable_classes = &#39;nico&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, on peut directement ajouter nos variables personnalisées en les
préfixant par &lt;code&gt;nico.&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nico.test_guc = 1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut alors manipuler ces variables comme ceci :&lt;/p&gt;
&lt;h2 id=&#34;nicotest_guc&#34;&gt;{% highlight psql %}
mydb=# SHOW nico.test_guc;
nico.test_guc&lt;/h2&gt;
&lt;p&gt;1000
(1 row)&lt;/p&gt;
&lt;h2 id=&#34;nicotest_guc-1&#34;&gt;mydb=# SHOW nico.test_guc;
nico.test_guc&lt;/h2&gt;
&lt;p&gt;1000
(1 row)&lt;/p&gt;
&lt;h2 id=&#34;nicotest_guc-2&#34;&gt;mydb=# SET nico.test_guc = 3;
SET
mydb=# SHOW nico.test_guc;
nico.test_guc&lt;/h2&gt;
&lt;p&gt;3
(1 row)&lt;/p&gt;
&lt;h2 id=&#34;nicoreguc&#34;&gt;mydb=# SET nico.reguc = on;
SET
mydb=# SHOW nico.reguc;
nico.reguc&lt;/h2&gt;
&lt;p&gt;on
(1 row)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Enfin, on peut utiliser les fonctions `current_setting()` et
`set_config()` pour manipuler ces variables dans des fonctions :

{% highlight psql %}
mydb=# SELECT set_config(&#39;nico.test_guc&#39;, &#39;100&#39;, false);
 set_config 
------------
 100
(1 row)

mydb=# SELECT current_setting(&#39;nico.test_guc&#39;);
 current_setting 
-----------------
 100
(1 row)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;PS: merci à &lt;a href=&#34;http://momjian.us/main/blogs/pgblog/2011.html#December_1_2011&#34;&gt;ce post&lt;/a&gt; pour l&amp;rsquo;idée de creuser le sujet.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compiler dans l&#39;arbre des sources</title>
      <link>https://www.orgrim.net/post/2012-01-24-compiler-dans-larbre-des-sources/</link>
      <pubDate>Tue, 24 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2012-01-24-compiler-dans-larbre-des-sources/</guid>
      <description>&lt;p&gt;Je m&amp;rsquo;occupe actuellement de préparer ma box pour le FOSDEM, et il
s&amp;rsquo;avère qu&amp;rsquo;il manque le support du DRM (Direct Rendering Manager, le
truc pour avoir de l&amp;rsquo;accélération graphique dans le kernel pour X.org)
pour ma carte vidéo. Il s&amp;rsquo;agit de NetBSD 5.1.1, la version 6 n&amp;rsquo;aura pas
ce manque.&lt;/p&gt;
&lt;p&gt;Il faut donc recompiler un noyau pour ajouter cette fonctionnalité, pour
faire vite on ne passe pas par &lt;code&gt;build.sh&lt;/code&gt;, les tools etc, on compile
directement dans l&amp;rsquo;arbre des sources, montrer comment faire ça est le
but de post.&lt;/p&gt;
&lt;p&gt;On commence par récupérer les sources sur un serveur CVS près de chez
soi :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# export CVS_RSH=ssh
# export CVSROOT=&amp;quot;anoncvs@anoncvs.NetBSD.org:/cvsroot&amp;quot;
# cd /usr
# cvs -q -z3 co -P -rnetbsd-5-1-1-RELEASE src
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, on n&amp;rsquo;a pas besoin d&amp;rsquo;avoir une conf particulière dans son
&lt;code&gt;/etc/mk.conf&lt;/code&gt;, on n&amp;rsquo;a juste à ajouter les options dans le fichier de
conf du kernel et compiler directement par l&amp;rsquo;intermédiaire de &lt;code&gt;make&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On édite le fichier &lt;code&gt;/usr/src/sys/arch/i386/conf/GENERIC.local&lt;/code&gt;, pour y
ajouter les lignes suivantes, il est inclus par le fichier &lt;code&gt;GENERIC&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# DRI driver    
i915drm*        at vga?         # Intel i915, i945 DRM driver
mach64drm*      at vga?         # mach64 (3D Rage Pro, Rage) DRM driver
mgadrm*         at vga?         # Matrox G[24]00, G[45]50 DRM driver
r128drm*        at vga?         # ATI Rage 128 DRM driver
radeondrm*      at vga?         # ATI Radeon DRM driver
savagedrm*      at vga?         # S3 Savage DRM driver
sisdrm*         at vga?         # SiS DRM driver
tdfxdrm*        at vga?         # 3dfx (voodoo) DRM driver
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On compile le kernel à la main :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# config GENERIC
# cd ../compile/GENERIC
# make depend
# make
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On installe le kernel à la main :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mv /netbsd /netbsd.old
# cp netbsd /
# chmod 444 /netbsd
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour revenir facilement en arrière en cas de souci, on peut ajouter la
ligne suivante dans &lt;code&gt;/boot.cfg&lt;/code&gt;, en deuxième position :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;menu=Boot old kernel:boot netbsd.old
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il ne reste plus qu&amp;rsquo;à rebooter sur le nouveau kernel.&lt;/p&gt;
&lt;p&gt;Référence : &lt;a href=&#34;http://www.netbsd.org/docs/guide/en/chap-kernel.html#chap-kernel-building-manually&#34;&gt;Le guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On peut faire la même manip pour mettre à jour une partie du système
seulement, par exemple lorsqu&amp;rsquo;une faille de sécurité doit être corrigée.
La méthode de compilation dans l&amp;rsquo;arbre des sources est indiquée dans
l&amp;rsquo;avis.&lt;/p&gt;
&lt;p&gt;Plus généralement, la méthode est la suivante, avec l&amp;rsquo;exemple de &lt;code&gt;ls&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/src/bin/ls
# make USETOOLS=no cleandir
# make USETOOLS=no dependall
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le binaire résultant et sa doc sont prêts dans le répertoire courant, il
ne reste qu&amp;rsquo;à installer :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# make USETOOLS=no install
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>X11 forwarding request failed on channel 0</title>
      <link>https://www.orgrim.net/post/2011-10-21-x11-forwarding-request-failed-on-channel-0/</link>
      <pubDate>Fri, 21 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-10-21-x11-forwarding-request-failed-on-channel-0/</guid>
      <description>&lt;p&gt;Quand j&amp;rsquo;essaye de me logguer sur ma box NetBSD fraichement passé en
X.org modular, j&amp;rsquo;ai ça :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;orgrim@serfouette ~ $ ssh rateau 
X11 forwarding request failed on channel 0
Last login: Fri Oct 21 12:20:24 2011 from serfouette.home.orgrim.net
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;WTF? ça tombe en marche SSH normalement.&lt;/p&gt;
&lt;p&gt;Et bien le souci vient de l&amp;rsquo;échange des magic cookies pour
l&amp;rsquo;authentification entre serveurs X à travers SSH, c&amp;rsquo;est utilisé par le
X11 forwarding et on a besoin de plusieurs choses pour ça :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;le chemin complet vers &lt;code&gt;xauth&lt;/code&gt; sur le client&lt;/li&gt;
&lt;li&gt;le chemin complet vers &lt;code&gt;xauth&lt;/code&gt; sur le serveur&lt;/li&gt;
&lt;li&gt;Avoir &lt;code&gt;X11Forward yes&lt;/code&gt; sur le serveur quand on le demande sur le
client (il vaut &lt;code&gt;yes&lt;/code&gt; dans le &lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt; du client par
flemme de taper &lt;code&gt;-X&lt;/code&gt; sur la ligne de commande)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Le client est sous Linux, donc pas de soucis le chemin en dur
&lt;code&gt;/usr/bin/xauth&lt;/code&gt; dans le binaire &lt;code&gt;sshd&lt;/code&gt; marche. Par contre pour NetBSD
avec du X.org modular, il faut décommenter l&amp;rsquo;option &lt;code&gt;XAuthLocation&lt;/code&gt; dans
&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; et &lt;code&gt;/etc/ssh/ssh_config&lt;/code&gt; pour donner le bon
chemin vers &lt;code&gt;xauth&lt;/code&gt;, comme indiqué en commentaire dans ces deux
fichiers :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# If you use xorg from pkgsrc then uncomment the following line.
#  XAuthLocation /usr/pkg/bin/xauth
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, comme le &lt;code&gt;X11Forward&lt;/code&gt; est à &lt;code&gt;no&lt;/code&gt; par défaut sur NetBSD, je l&amp;rsquo;ai
activé. La &lt;strong&gt;vrai solution&lt;/strong&gt; est de faire ça côté client en utilisant
explicitement l&amp;rsquo;option &lt;code&gt;-X&lt;/code&gt; quand on veut ouvrir des fenêtres sur le
serveur.&lt;/p&gt;
&lt;p&gt;Le pire c&amp;rsquo;est que Google ne sort rien sur le message &amp;ldquo;X11 forwarding
request failed on channel 0&amp;rdquo;, à part une question sans réponse sur un
stackoverflow-like en Russe !&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quand PostgreSQL n&#39;a plus d&#39;espace disque à manger</title>
      <link>https://www.orgrim.net/post/2011-10-14-quand-postgresql-na-plus-despace-disque-a-manger/</link>
      <pubDate>Fri, 14 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-10-14-quand-postgresql-na-plus-despace-disque-a-manger/</guid>
      <description>&lt;p&gt;Voilà donc une question intéressante, comment se comporte PostgreSQL
face à un système de fichier plein ? Un peu d&amp;rsquo;expérimentation est
nécessaire pour se rassurer&amp;hellip;&lt;/p&gt;
&lt;p&gt;On crée deux systèmes de fichiers de faible taille pour les tests. Le
premier stockera &lt;code&gt;PGDATA&lt;/code&gt;, ainsi qu&amp;rsquo;une base de données nommée &lt;code&gt;db_data&lt;/code&gt;. Le
second sera le tablesapce &lt;code&gt;ts1&lt;/code&gt;, dans lequel oncréera une base de données
&lt;code&gt;db_ts1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;objectif est de montrer que seules les transactions modifiant des
objets stockés sur des systèmes de fichier plein sont affectées, c&amp;rsquo;est
pourquoi on a besoin de plusieurs tablespaces.&lt;/p&gt;
&lt;p&gt;Les binaires se trouvent dans &lt;code&gt;/home/pgsql/postgresql-9.0.4&lt;/code&gt;, &lt;code&gt;PGDATA&lt;/code&gt; dans
&lt;code&gt;/home/pgsql/postgresql-9.0.4/data&lt;/code&gt;, et le tablespace dans
&lt;code&gt;/home/pgsql/postgresql-9.0.4/ts1&lt;/code&gt;. On a donc monté et donné la propriété
des deux filesystèmes à orgrim, que fera tourner PostgreSQL :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# df -h
...
/dev/mapper/sys-pg1   504M   54M  425M  12% /home/pgsql/postgresql-9.0.4/data
/dev/mapper/sys-pg2   504M   17M  462M   4% /home/pgsql/postgresql-9.0.4/ts1
...

# cd /home/pgsql/postgresql-9.0.4/
# chown orgrim: data ts1
# chmod 700 data ts1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le cluster est préparé avec l&amp;rsquo;environnement suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ env | grep PG
PGPORT=5904
PGDATABASE=postgres
PGDATA=/home/pgsql/postgresql-9.0.4/data
PATH=/home/pgsql/postgresql-9.0.4/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On lance donc &lt;code&gt;initdb&lt;/code&gt;, puis on crée les bases avec le tablespace :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ initdb
$ psql
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

postgres=# CREATE DATABASE db_data;
CREATE DATABASE
postgres=# CREATE TABLESPACE ts1 LOCATION &#39;/home/pgsql/postgresql-9.0.4/ts1&#39;;
CREATE TABLESPACE
postgres=# CREATE DATABASE db_ts1 TABLESPACE ts1;
CREATE DATABASE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, on se connecte à la base de données &lt;code&gt;db_ts1&lt;/code&gt; et on y crée une
base qui permettra de remplir le tablespace &lt;code&gt;ts1&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ while ((1)); do psql -c &amp;quot;INSERT INTO t SELECT generate_series(1, 1000) AS i;&amp;quot; db_ts1; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Au bout, d&amp;rsquo;un moment le système de fichier du tablespace est plein et
tout requête générant des écritures sort en erreur avec un message de
cette forme :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR:  could not extend file &amp;quot;pg_tblspc/16385/PG_9.0_201008051/16386/16390&amp;quot;: wrote only 4096 of 8192 bytes at block 58438
HINT:  Check free disk space.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, on essaye avec le répertoire &lt;code&gt;PGDATA&lt;/code&gt;, on crée donc une table
dans la base &lt;code&gt;db_data&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ psql db_data
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

db_data=# CREATE TABLE t (i int);
CREATE TABLE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;De la même façon, on remplit cette table jusqu&amp;rsquo;à épuisement de l&amp;rsquo;espace
libre :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ while ((1)); do psql -c &amp;quot;INSERT INTO t SELECT generate_series(1, 1000) AS i;&amp;quot; db_data; done
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Résultat, les requêtes sortent en erreur de la même façon. On a
peut-être de la chance ici, le filesystem contenant &lt;code&gt;pg_xlog&lt;/code&gt;, les
problèmes pourraient être pis.&lt;/p&gt;
&lt;p&gt;Il est également possible de remplir le système de fichiers de journaux
de transactions, ce qui est problématique du fait que chaque transaction
est écrite ici tout tablespace confondu. On vide donc les deux bases :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ psql db_ts1
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

db_ts1=# TRUNCATE t;
TRUNCATE TABLE

$ psql db_data
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

db_data=# TRUNCATE t;
TRUNCATE TABLE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et on place le paramètre &lt;code&gt;checkpoint_segments&lt;/code&gt; à 300, valeur démesurée
par rapport à la place disponible dans &lt;code&gt;PGDATA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Après un reload, on refait alors le test de remplissage de la base
&lt;code&gt;db_ts1&lt;/code&gt;, qui assure que les journaux de transactions seuls remplissent
&lt;code&gt;PGDATA&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Le serveur PostgreSQL s&amp;rsquo;arrête parce qu&amp;rsquo;il ne peut écrire le journal de
transaction :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PANIC:  could not write to file &amp;quot;pg_xlog/xlogtemp.8795&amp;quot;: No space left on device
STATEMENT:  INSERT INTO t SELECT generate_series(1, 1000) AS i;
LOG:  server process (PID 8795) was terminated by signal 6: Aborted
LOG:  terminating any other active server processes
WARNING:  terminating connection because of crash of another server process
DETAIL:  The postmaster has commanded this server process to roll back the current transaction and exit, because another server process exited abnormally and possibly corrupted shared memory.
HINT:  In a moment you should be able to reconnect to the database and repeat your command.
LOG:  all server processes terminated; reinitializing
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il redémarre illico, mais le problème persiste :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FATAL:  the database system is in recovery mode
LOG:  database system was interrupted; last known up at 2011-10-12 00:01:40 CEST
LOG:  database system was not properly shut down; automatic recovery in progress
LOG:  consistent recovery state reached at 0/5FDB7480
LOG:  redo starts at 0/5AA57D68
LOG:  could not open file &amp;quot;pg_xlog/000000010000000000000074&amp;quot; (log file 0, segment 116): No such file or directory
LOG:  redo done at 0/73FFFF90
LOG:  last completed transaction was at log time 2011-10-12 00:05:11.710639+02
PANIC:  could not write to file &amp;quot;pg_xlog/xlogtemp.8797&amp;quot;: No space left on device
LOG:  startup process (PID 8797) was terminated by signal 6: Aborted
LOG:  aborting startup due to startup process failure
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le seul moyen de se sortir de cette situation est d&amp;rsquo;utiliser les 5%
d&amp;rsquo;espace libre du filesystem réservés au super utilisateur, de baisser
la valeur de &lt;code&gt;checkpoint_segments&lt;/code&gt; à une valeur évitant le filesystem
full, les checkpoints successif supprimeront les fichiers en trop.&lt;/p&gt;
&lt;p&gt;Lorsqu&amp;rsquo;on a plus besoin des 5% réservés, il ne faut pas oublier de
remettre la réservation.&lt;/p&gt;
&lt;p&gt;Enfin, ce cas le plus critique peut arriver assez facilement lorsqu&amp;rsquo;on a
de l&amp;rsquo;archivage, si le serveur ne peut plus archiver les fichiers WAL,
alors il les conserve, un filesystem full sur un espace d&amp;rsquo;archivage peut
donc être transmis au serveur&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Passer de X.org natif à modular</title>
      <link>https://www.orgrim.net/post/2011-09-19-passer-de-xorg-natif-a-modular/</link>
      <pubDate>Mon, 19 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-09-19-passer-de-xorg-natif-a-modular/</guid>
      <description>&lt;p&gt;X.org est fourni dans le basesys et dans pkgsrc, on appelle le premier
« native » et le second « modular » selon la valeur de la variable
&lt;code&gt;X11_TYPE&lt;/code&gt; que l&amp;rsquo;on positionne dans son &lt;code&gt;/etc/mk.conf&lt;/code&gt; pour signifier à
pkgsrc sur lequel linker.&lt;/p&gt;
&lt;p&gt;Il s&amp;rsquo;agit des mêmes versions à peu de choses prêt, et X.org native n&amp;rsquo;est
pas vieux ou non maintenu comme la rumeur voudrait le faire croire. Il
est juste en retard parce qu&amp;rsquo;il suit le cycle de release du basesys
alors que modular suit celui de pkgsrc et est tiré vers l&amp;rsquo;avant par les
packages qui en dépendent. Cela peut poser problème lorsqu&amp;rsquo;on suit la
cible mouvante qu&amp;rsquo;est pkgsrc-current.&lt;/p&gt;
&lt;p&gt;La première chose à faire pour passer de native à modular est d&amp;rsquo;éditer
&lt;code&gt;/etc/mk.conf&lt;/code&gt; pour changer &lt;code&gt;X11_TYPE&lt;/code&gt;, on en profite pour ne plus
compiler le native :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MKX11=no 
X11_TYPE=modular
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, il faut modifier la liste de packages à compiler pour y ajouter
soit tout modular en installant &lt;code&gt;meta-pkgs/modular-xorg&lt;/code&gt;, soit en
n&amp;rsquo;installant que le nécessaire, ça fait plus cool, dans
&lt;code&gt;/usr/pkgsrc/pkgchk.conf&lt;/code&gt; (si vous avez suivi les docs ici ou dans le
wiki) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;meta-pkgs/modular-xorg-apps
meta-pkgs/modular-xorg-libs
meta-pkgs/modular-xorg-fonts
x11/xf86-input-keyboard
x11/xf86-input-mouse
x11/xf86-input-void
x11/xf86-video-nv
x11/xf86-video-vesa
x11/xf86-video-vga
x11/xf86-video-wsfb
x11/modular-xorg-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite on donne ça à manger à &lt;code&gt;pkg_comp&lt;/code&gt; ou à son bulk. L&amp;rsquo;important ici
est de tout recompiler pour bien transférer les dépendances de native
vers modular : en gros on pète la sandbox, que ça soit de &lt;code&gt;mk/bulk&lt;/code&gt; ou
&lt;code&gt;pkg_comp&lt;/code&gt; et on recommence. Etant passé en mode bulk partiel comme
indiqué dans un précédent &lt;a href=&#34;https://www.orgrim.net/post/2011/08/19/Bulk-build-partiel-de-pkgsrc&#34;&gt;post&lt;/a&gt;, voici comment faire :&lt;/p&gt;
&lt;p&gt;​1. On vérifie avec &lt;code&gt;mount&lt;/code&gt; que la standbox n&amp;rsquo;est pas montée ni qu&amp;rsquo;un
build tourne (dans ce cas faut le killer), sinon :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /usr/sandbox/sandbox umount
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​2. On vérifie que le contenu des mk.conf du système et de la sandbox
sont en phase, c&amp;rsquo;est le seul fichier de la sandbox à sauver&lt;/p&gt;
&lt;p&gt;​3. On recrée la sandbox :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# rm -rf /usr/sandbox
# cd /usr/pkgsrc/mk/bulk
# sh mksandbox --without-x /usr/sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​4. On nettoie les packages déjà compilés, pour forcer leur
recompilation, et les fichiers cachés du bulk build :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/pkgsrc/packages/
# mv CVS .CVS
# rm -rf *
# mv .CVS CVS
# cd /usr/pkgsrc
# rm .broken.html .bulk_build_id .bulk_db .bulklock .depends .dependstree .index  .order .start .supports
# pkgclean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​5. On lance le bulk build et on attend, il faut prévoir entre 150 et
200 packages supplémentaires à compiler.&lt;/p&gt;
&lt;p&gt;Les étapes suivantes sont simples, on sauvegarde tout ce qu&amp;rsquo;il faut dans
&lt;code&gt;/usr/pkg&lt;/code&gt;, puis on supprime tous les packages installés :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr
# mv pkg pkg.old
# cd /var/db
# mkdir old_pkgdb
# mv pkg pkg.refcount old_pkgdb
# rm -rf pkgin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A partir d&amp;rsquo;ici, on n&amp;rsquo;a plus de programmes issus de pkgsrc, en gros pas
de sudo, vim et autres&amp;hellip;&lt;/p&gt;
&lt;p&gt;Puis, il faut supprimer les fichiers des sets de X.org, on se base pour
cela sur le contenu de &lt;code&gt;/etc/mtree/set.x*&lt;/code&gt;. On en arrive donc à un stade
où on est dans la même situation qu&amp;rsquo;après une installation du système
sans les sets de X.org natif.&lt;/p&gt;
&lt;p&gt;Enfin, on réinstalle tout les packages avec &lt;a href=&#34;http://www.pkgin.net&#34;&gt;pkgin&lt;/a&gt;, qui dans sa
version 0.5.0 (du CVS) peut importer une liste de packages au format de
&lt;code&gt;pkg_chk&lt;/code&gt;, qui se trouve être le même utilisé par le bulk-build, comme de
par hasard :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_add http://pkgsrc.orgrim.net/NetBSD/5.1/amd64/All/pkg_install-20110805.tgz
# mkdir -p /usr/pkg/etc
# cp -r /usr/pkg.old/etc/pkgin /usr/pkg/etc
# ./pkgin up
# ./pkgin im pkgchk.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note :&lt;/strong&gt; si le &lt;code&gt;pkg_add&lt;/code&gt; de pkg_install ne passe pas, essayer avec
&lt;code&gt;-f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;et hop, reste plus qu&amp;rsquo;à reconfigurer les chemins dans
&lt;code&gt;/etc/X11/xorg.conf&lt;/code&gt; et c&amp;rsquo;est bon.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Bulk build partiel de pkgsrc</title>
      <link>https://www.orgrim.net/post/2011-08-19-bulk-build-partiel-de-pkgsrc/</link>
      <pubDate>Fri, 19 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-08-19-bulk-build-partiel-de-pkgsrc/</guid>
      <description>&lt;p&gt;En suivant l&#39;&lt;a href=&#34;http://www.guigui2.net/index.php?post/2011/07/30/sudo-sh-/usr/pkgsrc/mk/bulk/do-sandbox-build-s&#34;&gt;excellent tip de Mr GuiGui2&lt;/a&gt;, j&amp;rsquo;ai pu monter ma petite
archi de bulk build personnelle pour fournir du package tout frais à
&lt;a href=&#34;http://pkgin.net&#34;&gt;pkgin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;J&amp;rsquo;ai donc ajouté le bloc magique suivant à mon &lt;code&gt;/etc/mk.conf&lt;/code&gt;, qui
permet de gérer la présence de commentaires dans &lt;code&gt;pkgchk.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# bulk build config
DEPENDS_TARGET= bulk-install
BATCH=          yes

BULK_PREREQ+=   pkgtools/lintpkgsrc
.if defined(SPECIFIC_PKGS)
PKGLIST!=               awk &#39;$$1 !~ /^\\#/ {print $$1}&#39; ${PKGCHK_CONF}
.       for _pkg_ in ${PKGLIST}
HOST_SPECIFIC_PKGS+=    ${_pkg_}
.       endfor
.endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour aller plus loin, j&amp;rsquo;ai automatisé le process au maximum pour lancer
des bulk build réguliers par cron, grâce au script [bulk-builder][]. Ce
script remplace &lt;code&gt;do-sandbox-build&lt;/code&gt; et &lt;code&gt;do-sandbox-upload&lt;/code&gt;, il est
également capable de gérer des chemins alternatifs, mettre à jour
&lt;code&gt;pkgsrc&lt;/code&gt; avant de lancer le bulk.&lt;/p&gt;
&lt;p&gt;La procédure pour mettre ça en place est donc :&lt;/p&gt;
&lt;p&gt;​1. Ajouter le bloc montré plus haut à &lt;code&gt;/etc/mk.conf&lt;/code&gt; et y définir
&lt;code&gt;PKGCHK_CONF&lt;/code&gt;, il s&amp;rsquo;agit du chemin vers une liste de packages au format
\&amp;ldquo;catetgorie/package\&amp;rdquo;, un par ligne, qu&amp;rsquo;on peut automatiquement créer
avec &lt;code&gt;pkg_chk -g&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;​2. Créer la sandbox :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/pkgsrc/mk/bulk
# sh mksandbox --without-x /usr/sandbox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​3. Créer et configurer &lt;code&gt;/usr/pkgsrc/mk/bulk/build.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/pkgsrc/mk/bulk
# cp build.conf-example build.conf
# vi build.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​4. Lancer le bulk build :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# sh bulk-builder -u -R
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt; demande de &lt;code&gt;cvs up&lt;/code&gt; le répertoire &lt;code&gt;/usr/pkgsrc&lt;/code&gt; avant de
commencer&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt; demande de ne pas uploader le résultat (les packages)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin, il suffit d&amp;rsquo;utiliser la ligne suivante pour utiliser les packages
avec &lt;code&gt;pkgin&lt;/code&gt;, dans &lt;code&gt;/usr/pkg/etc/pkgin/repositories.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file:///usr/pkgsrc/packages/All
&lt;/code&gt;&lt;/pre&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Montrer les dépendances avec make dans pkgsrc</title>
      <link>https://www.orgrim.net/post/2011-08-18-montrer-les-dependances-avec-make-dans-pkgsrc/</link>
      <pubDate>Thu, 18 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-08-18-montrer-les-dependances-avec-make-dans-pkgsrc/</guid>
      <description>&lt;p&gt;Généralement, on peut savoir quelles sont les dépendances d&amp;rsquo;un package
en utilisant &lt;code&gt;make show-depends&lt;/code&gt;, mais cela ne montre que les
dépendances pour l&amp;rsquo;installation, les dépendances pour la compilation ne
sont pas montrées.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;pre&gt;&lt;code&gt;$ cd /usr/pkgsrc/databases/postgresql90-server/
$ make show-depends
postgresql90-client&amp;gt;=9.0.4:../../databases/postgresql90-client
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour connaître les dépendances selon leur type (installation ou
compilation), on peut utiliser la cible &lt;code&gt;show-depends-pkgpaths&lt;/code&gt; alliée à
la variable &lt;code&gt;DEPENDS_TYPE&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pour avoir seulement les dépendances de compilation :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make DEPENDS_TYPE=build show-depends-pkgpaths
devel/bison
devel/gmake
pkgtools/digest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour avoir seulement celles d&amp;rsquo;installation :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make DEPENDS_TYPE=install show-depends-pkgpaths
databases/postgresql90-client
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et enfin pour montrer les deux types, qui est aussi le comportement par
défaut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ make DEPENDS_TYPE=all show-depends-pkgpaths
databases/postgresql90-client
devel/bison
devel/gmake
pkgtools/digest

$ make show-depends-pkgpaths
databases/postgresql90-client
devel/bison
devel/gmake
pkgtools/digest
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour plus d&amp;rsquo;information, le Makefile qui contrôle cette cible est
&lt;code&gt;mk/bsd.utils.mk&lt;/code&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Le client de la BuildFarm de PostgreSQL dans pkgsrc-wip</title>
      <link>https://www.orgrim.net/post/2011-08-06-le-client-de-la-buildfarm-de-postgresql-dans-pkgsrc-wip/</link>
      <pubDate>Sat, 06 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-08-06-le-client-de-la-buildfarm-de-postgresql-dans-pkgsrc-wip/</guid>
      <description>&lt;p&gt;Comme j&amp;rsquo;annonçais précédemment, je contribue deux machines NetBSD à la
BuildFarm de PostgreSQL. La compilation ne se fait automagiquement
qu&amp;rsquo;après la configuration du client (écrit en Perl). Il n&amp;rsquo;est d&amp;rsquo;ailleurs
pas forcément très convi à installer, c&amp;rsquo;est pourquoi je l&amp;rsquo;ai packagé
pour pkgsrc : &lt;a href=&#34;http://pkgsrc.se/wip/pgbuildfarm&#34;&gt;http://pkgsrc.se/wip/pgbuildfarm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;En espérant qu&amp;rsquo;il soit ajouté à l&amp;rsquo;arbre officiel&amp;hellip;&lt;/p&gt;
&lt;p&gt;Voici la configuration pour lancer des builds sur NetBSD, dans
&lt;code&gt;/usr/pkg/etc/pgbuildfarm/build-farm.conf&lt;/code&gt;, en commençant par le chemin
du miroir du dépôt Git :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Modifier dans %conf
scmrepo =&amp;gt; &#39;/usr/pgbuildfarm/pgsql-base.git&#39;,
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le client est destiné à être lancé par cron, connu pour son
environnement light, c&amp;rsquo;est pourquoi les paramètres d&amp;rsquo;environnement
doivent être adaptés :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Le make GNU s&amp;rsquo;appelle gmake chez nous&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pas mal de programmes proviennent de pkgsrc, il faut donc que le
client ait &lt;code&gt;/usr/pkg/bin&lt;/code&gt; dans son PATH, et puisse trouver les
bibliothèques issues des packages.&lt;/p&gt;
&lt;p&gt;make =&amp;gt; &amp;lsquo;gmake&amp;rsquo;,
aux_path =&amp;gt; &amp;ldquo;/usr/pkg/bin&amp;rdquo;,&lt;/p&gt;
&lt;p&gt;build_env =&amp;gt;
{
PATH =&amp;gt; &amp;ldquo;/usr/pkg/bin:$ENV{PATH}&amp;rdquo;,
LD_LIBRARY_PATH =&amp;gt; &amp;ldquo;/usr/pkg/lib&amp;rdquo;,
},&lt;/p&gt;
&lt;p&gt;config_env =&amp;gt;
{
CC =&amp;gt; &amp;lsquo;gcc&amp;rsquo;,
PATH =&amp;gt; &amp;ldquo;/usr/pkg/bin:$ENV{PATH}&amp;rdquo;,
LD_LIBRARY_PATH =&amp;gt; &amp;ldquo;/usr/pkg/lib&amp;rdquo;,
},&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enfin le plus important, les options du &lt;code&gt;configure&lt;/code&gt;, la plupart
nécessitent des packages supplémentaires comme &lt;code&gt;python&lt;/code&gt; ou la &lt;code&gt;libxml&lt;/code&gt;.
Ce qui est primordial ici est d&amp;rsquo;utiliser le « template » NetBSD :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;config_opts =&amp;gt;
[qw(
    --enable-cassert
    --enable-debug
    --enable-nls
    --enable-integer-datetimes
    --with-perl
    --with-python
    --with-tcl
    --with-krb5
    --with-includes=/usr/include/krb5:/usr/pkg/include
    --with-libraries=/usr/pkg/lib
    --with-openssl
    --with-template=netbsd
    --enable-thread-safety
)],
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour toutes ces options, les packages suivants ont été installés :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;devel/bison&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;devel/flex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang/python26&lt;/code&gt; (et &lt;code&gt;pkgtools/pkg_alternatives&lt;/code&gt; pour avoir le lien
python)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang/perl5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lang/tcl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textproc/libxml2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textproc/libxslt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;devel/readline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. : Il n&amp;rsquo;y a que les particularités de NetBSD décrites ici, en
complément du &lt;a href=&#34;http://wiki.postgresql.org/wiki/PostgreSQL_Buildfarm_Howto&#34;&gt;wiki de PostgreSQL&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Could not open relation with oid N</title>
      <link>https://www.orgrim.net/post/2011-08-04-could-not-open-relation-with-oid-n/</link>
      <pubDate>Thu, 04 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-08-04-could-not-open-relation-with-oid-n/</guid>
      <description>&lt;p&gt;On peut parfois trouver cet étrange message d&amp;rsquo;erreur dans les traces de
PostgreSQL (N étant un nombre) ou lors de l&amp;rsquo;exécution d&amp;rsquo;une requête :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR:  could not open relation with OID N
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si on recherche ce message dans les mailing-lists du projet, on peut
facilement conclure que la base de données est corrompue, qu&amp;rsquo;il y a des
problèmes matériels et que la sécurité des données est en péril. Et
bien, ce n&amp;rsquo;est pas forcément le cas : obtenir ce message peut être tout
à fait normal.&lt;/p&gt;
&lt;p&gt;Pour démontrer cela, on a besoin d&amp;rsquo;une table :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ createdb test
$ psql test
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

test=# CREATE TABLE truc AS SELECT generate_series(0, 5) AS i;
SELECT 6
test=#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On lance une session qui bloquerait un &lt;code&gt;DROP&lt;/code&gt; de cette table, pour cela
on pose un verrou exclusif, le mode « ExclusiveLock » ne laisse passer
que les lectures (c&amp;rsquo;est important pour la suite) :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ psql test
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

test=# BEGIN;
BEGIN
test=# LOCK TABLE truc IN EXCLUSIVE MODE;
LOCK TABLE
test=#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On laisse cette transaction « ouverte », avec le verrou posé et on lance
une session pour supprimer la table :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ psql test
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

test=# BEGIN;
BEGIN
test=# DROP TABLE truc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;L&amp;rsquo;ordre SQL &lt;code&gt;DROP TABLE&lt;/code&gt; ne rend pas la main, cette deuxième session
attend le verrou « AccessExclusiveLock », qui est le plus restrictif,
sur la table pour pouvoir la supprimer. La page
&lt;a href=&#34;http://wiki.postgresql.org/wiki/Lock_dependency_information&#34;&gt;http://wiki.postgresql.org/wiki/Lock_dependency_information&lt;/a&gt; fournie une requête montrant
les dépendances entre requêtes du point de vue du verrouillage. Dans ce
cas, elle donne le résultat suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; waiting_locktype | waiting_table |  waiting_query   |    waiting_mode     | waiting_pid | other_locktype | other_table |      other_query      |  other_mode   | other_pid | other_granted 
------------------+---------------+------------------+---------------------+-------------+----------------+-------------+-----------------------+---------------+-----------+---------------
 relation         | truc          | DROP TABLE truc; | AccessExclusiveLock |       25632 | relation       | truc        | &amp;lt;IDLE&amp;gt; in transaction | ExclusiveLock |     24217 | t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On lance une troisième session, avec un &lt;code&gt;SELECT&lt;/code&gt; sur notre table :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ psql test
psql (9.0.4)
Type &amp;quot;help&amp;quot; for help.

test=# SELECT * FROM truc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;L&amp;rsquo;ordre &lt;code&gt;SELECT&lt;/code&gt; ne rend pas la main, cette troisième session se met à
attendre le &lt;code&gt;DROP TABLE&lt;/code&gt; et la première session. C&amp;rsquo;est d&amp;rsquo;ailleurs le
&lt;code&gt;DROP TABLE&lt;/code&gt; qui bloque réellement le &lt;code&gt;SELECT&lt;/code&gt;, car la première session
à verrouillé la table en lecture seule :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; waiting_locktype | waiting_table |    waiting_query    |    waiting_mode     | waiting_pid | other_locktype | other_table |      other_query      |     other_mode      | other_pid | other_granted 
------------------+---------------+---------------------+---------------------+-------------+----------------+-------------+-----------------------+---------------------+-----------+---------------
 relation         | truc          | SELECT * FROM truc; | AccessShareLock     |       28629 | relation       | truc        | DROP TABLE truc;      | AccessExclusiveLock |     25632 | f
 relation         | truc          | DROP TABLE truc;    | AccessExclusiveLock |       25632 | relation       | truc        | &amp;lt;IDLE&amp;gt; in transaction | ExclusiveLock       |     24217 | t
 relation         | truc          | SELECT * FROM truc; | AccessShareLock     |       28629 | relation       | truc        | &amp;lt;IDLE&amp;gt; in transaction | ExclusiveLock       |     24217 | t
 relation         | truc          | DROP TABLE truc;    | AccessExclusiveLock |       25632 | relation       | truc        | SELECT * FROM truc;   | AccessShareLock     |     28629 | f
(4 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On libère la première session :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;test=# ROLLBACK;
ROLLBACK
test=#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le &lt;code&gt;DROP TABLE&lt;/code&gt; passe, et le &lt;code&gt;SELECT&lt;/code&gt; continue d&amp;rsquo;attendre :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; waiting_locktype | waiting_table |    waiting_query    |  waiting_mode   | waiting_pid | other_locktype | other_table |      other_query      |     other_mode      | other_pid | other_granted 
------------------+---------------+---------------------+-----------------+-------------+----------------+-------------+-----------------------+---------------------+-----------+---------------
 relation         | truc          | SELECT * FROM truc; | AccessShareLock |       28629 | relation       | truc        | &amp;lt;IDLE&amp;gt; in transaction | AccessExclusiveLock |     25632 | t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On voit que le &lt;code&gt;SELECT&lt;/code&gt; attend la transaction qui a lancé le
&lt;code&gt;DROP TABLE&lt;/code&gt;. Même si le &lt;code&gt;DROP TABLE&lt;/code&gt; est terminé, son effet ne sera
connu des transactions concurrentes seulement ou moment du commit ou
rollback, parce qu&amp;rsquo;on utilise le niveau d&amp;rsquo;isolation des transaction
« read committed » (par défaut). Il n&amp;rsquo;y a pas de « &lt;code&gt;UNLOCK&lt;/code&gt; » sur les
tables dans PostgreSQL, il faut attendre la fin de la transaction pour
que les verrous soient libérés, du moins lorsqu&amp;rsquo;on n&amp;rsquo;utilise pas de
savepoints.&lt;/p&gt;
&lt;p&gt;Maintenant, on valide le &lt;code&gt;DROP TABLE&lt;/code&gt;, avec l&amp;rsquo;ordre &lt;code&gt;COMMIT&lt;/code&gt;. Le
&lt;code&gt;SELECT&lt;/code&gt; termine en erreur, on voit alors le message dans les logs :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ERROR:  could not open relation with OID 17366 at character 15
STATEMENT:  SELECT * FROM truc;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lorsque le &lt;code&gt;SELECT&lt;/code&gt; n&amp;rsquo;est plus bloqué par le verrou, il ne peut accéder
pas à la table car elle n&amp;rsquo;existe plus. Le message n&amp;rsquo;est pas très
explicite parce que la requête est en cours d&amp;rsquo;exécution : le moteur a
déjà terminé le travail de parsing et de planification, il ne travaille
qu&amp;rsquo;avec les OID qu&amp;rsquo;il a récupéré du catalogue système à ce moment là.&lt;/p&gt;
&lt;p&gt;Dans ce cas précis, obtenir ce message n&amp;rsquo;est un problème de corruption
de la base ou du catalogue système.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Configuration réseau pour virtualiser chez OVH</title>
      <link>https://www.orgrim.net/post/2011-07-04-configuration-reseau-pour-virtualiser-chez-ovh/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-07-04-configuration-reseau-pour-virtualiser-chez-ovh/</guid>
      <description>&lt;p&gt;Sur mon serveur chez OVH, j&amp;rsquo;ai un ensemble de machines virtuelles KVM et
(bientôt) de conteneurs LXC. Pour fournir du réseau à tout ce petit
monde, j&amp;rsquo;utilise de l&amp;rsquo;IPv4 et de l&amp;rsquo;IPv6, voici comment c&amp;rsquo;est configuré.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;IPv4, on a un nombre limité d&amp;rsquo;IP publiques parce que ça vaut de
la thune et que ça va être de plus en tendu de multiplier les adresses,
il nous faut un réseau privé (beurk), du NAT (rebeurk) et des
redirections à base d&amp;rsquo;iptables (re-rebeurk). Il nous faut surtout un
bridge, c&amp;rsquo;est une Debian donc ça se passe dans
&lt;code&gt;/etc/network/interfaces&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auto lo
iface lo inet loopback

auto eth0
iface eth0 inet manual

auto br0
iface br0 inet static
        bridge_ports eth0
        bridge_fd 0
        bridge_maxwait 0
        address 188.165.205.xxx
        netmask 255.255.255.0
        network 188.165.205.0
        broadcast 188.165.205.255
        gateway 188.165.205.254
        post-up iptables -t nat -A POSTROUTING -s 10.42.0.0/24 -o br0 -j SNAT --to 188.165.205.xxx
        pre-down iptables -t nat -D POSTROUTING -s 10.42.0.0/24 -o br0 -j SNAT --to 188.165.205.xxx

iface br0 inet6 static
        address 2001:41D0:xxxx:96ce::1
        netmask 64

auto br0:0
iface br0:0 inet static
        address 10.42.0.1
        netmask 255.255.255.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour le bridge, on met l&amp;rsquo;IPv4 publique et une règle iptable pour NAT-er
ce qui sort. Le réseau privé est 10.42.0.0/24, on peut bien sûr choisir
ce qu&amp;rsquo;on veut dans ce que fourni la RFC 1918.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;IPv6, chez OVH c&amp;rsquo;est bizarre : il fournissent un prefix 64 bit et
avec une route accessible sur le /56 incluant, mais pas à partir du /64.
Il faut donc ruser de la façon suivante niveau routage.&lt;/p&gt;
&lt;p&gt;On assigne l&amp;rsquo;IPv6 avec le prefix /64, c&amp;rsquo;est plus propre, sinon le kernel se plaint avec /56 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 addr add 2001:41D0:xxxx:96ce::1/64 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On met une route pour atteindre la gateway dans le /56 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 route add 2001:41d0:xxxx:96ce::/56 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On met la route par défaut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip -6 route add default via 2001:41d0:xxxx:96ff:ff:ff:ff:ff
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour avoir cette configuration appliquée automatiquement, il faut créer
&lt;code&gt;/etc/network/if-up.d/ovh-ipv6-route&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$IFACE&amp;quot; = &amp;quot;br0&amp;quot; ]; then
    ip -6 route add 2001:41d0:2:96ce::/56 dev br0
    ip -6 route add default via 2001:41d0:2:96ff:ff:ff:ff:ff
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et pour l&amp;rsquo;arrêt, &lt;code&gt;/etc/network/if-down.d/ovh-ipv6-route&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh

if [ &amp;quot;$IFACE&amp;quot; = &amp;quot;br0&amp;quot; ]; then
    ip -6 route del default via 2001:41d0:2:96ff:ff:ff:ff:ff
    ip -6 route del 2001:41d0:2:96ce::/56 dev br0
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il faut ensuite activer le forward entre interfaces, sinon pas de
routage vers les VM, dans &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv6.conf.all.forwarding=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, le routage chez OVH ne permet pas d&amp;rsquo;intercaler un routeur pour
découper le /64, il faut donc ruser avec du proxy NDP (Neighbor
Discovery Protocol).&lt;/p&gt;
&lt;p&gt;On active le proxy NDP, dans &lt;code&gt;/etc/sysctl.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;net.ipv6.conf.all.proxy_ndp=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On ajoute les IP à proxiser, celle de la gateway et chacune des IP
fournies aux VM :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip neigh add proxy 2001:41d0:xxxx:96ff:ff:ff:ff:ff dev br0
# ip neigh add proxy 2001:41d0:xxxx:96ce::2 dev br0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En cas de reboot d&amp;rsquo;une VM, il faut d&amp;rsquo;abord virer ses IP du proxy, puis
les remettre, sinon le kernel de la VM se plein d&amp;rsquo;une duplication
d&amp;rsquo;adresse :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ip neigh del proxy 2001:41d0:xxxx:96ce::2 dev br0
-&amp;gt; reboot de la VM
# ip neigh add proxy 2001:41d0:xxxx:96ce::2 dev br0
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>NetBSD en KVM</title>
      <link>https://www.orgrim.net/post/2011-07-04-netbsd-en-kvm/</link>
      <pubDate>Mon, 04 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-07-04-netbsd-en-kvm/</guid>
      <description>&lt;p&gt;Comme je viens d&amp;rsquo;investir dans un &lt;a href=&#34;http://www.kimsufi.com/fr/&#34;&gt;serveur kimsufi&lt;/a&gt; (le 16G), je me suis dis qu&amp;rsquo;avoir
quelques machines NetBSD pour servir la bonne cause ça serait bien cool.&lt;/p&gt;
&lt;p&gt;En fait, j&amp;rsquo;ai deux besoins :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Avoir un dépôt de paquet et de quoi fait des bulk build réduits de
pkgsrc pour me permettre de n&amp;rsquo;utiliser uniquement l&amp;rsquo;excellent pkgin&lt;/li&gt;
&lt;li&gt;Fournir des machines à la Build Farm de PostgreSQL, parce qu&amp;rsquo;il n&amp;rsquo;y
a même pas de machine NetBSD en i386 et en amd64 (seulement powerpc
et mips)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;J&amp;rsquo;ai donc décidé de monter 2 machines NetBSD en KVM sur ma grosse box
Debian, qui fait tourner ça grâce à KVM.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;installation, il y a 2 possibilités, soit on fait du VNC, soit on
redirige la sortie VGA dans du curses. Pour le disque j&amp;rsquo;ai choisi de
poser directement les données sur des volumes logiques, dans ce cas, il
faut désactiver le cache ce qui permet une infime perte de puissance en
I/O.&lt;/p&gt;
&lt;p&gt;Il faut commencer par récupérer l&amp;rsquo;ISO d&amp;rsquo;installation :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget ftp://ftp.fr.netbsd.org/pub/NetBSD/iso/5.1/amd64cd-5.1.iso
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, créer le volume logique (on a choisi de donner 50 Go) et lancer
l&amp;rsquo;installation, en curses ça passe nickel, il faut choisir d&amp;rsquo;utiliser la
console serie :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kvm -drive file=/dev/system/kvm-nb64-d1,cache=none \\
    -m 1024 \\
    -net nic,model=e1000 -net tap \\
    -name nb64 \\
    -curses \\
    -cdrom /home/orgrim/netbsd/amd64cd-5.1.iso \\
    -boot d \\
    -k fr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Une fois installé, on lance la commande suivante dans un screen, on
demande à KVM de fournir l&amp;rsquo;accès console en série dans un fichier, ce
qui permet d&amp;rsquo;avoir la console QEMU disponible directement dans le
screen :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;kvm -nographic \\
    -drive file=/dev/system/kvm-nb64-d1,cache=none \\
    -m 1024 \\
    -net nic,model=e1000,macaddr=DE:AD:BE:EF:37:D1 -net tap \\
    -name nb64 \\
    -boot c \\
    -serial unix:/tmp/nb64.sock,server,nowait
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: merci de changer la MAC de l&amp;rsquo;interface réseau, c&amp;rsquo;est utilisé en
prod chez moi :)&lt;/p&gt;
&lt;p&gt;Enfin, il est important de démarrer le noyau NetBSD sans ACPI ni SMP (en
mettant le defaut à 4 dans &lt;code&gt;/boot.cfg&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Pour accéder à la machine en console série :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;minicom -D unix#/tmp/nd64.sock
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si on a oublié de choisir la console série, on peut l&amp;rsquo;activer de cette
façon :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Booter avec &lt;code&gt;-curses -k fr&lt;/code&gt; à la place de &lt;code&gt;-nographic&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lancer la commande suivante pour activer la console série :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; # installboot -v -o console=com0,speed=19200 /dev/rwd0a /usr/mdec/bootxx_ffsv1
 File system:         /dev/rwd0a
 Primary bootstrap:   /usr/mdec/bootxx_ffsv1
 Boot options:        timeout 5, flags 0, speed 19200, ioaddr 0, console com0
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>Rediriger stdout/stderr depuis un script avec du pipe</title>
      <link>https://www.orgrim.net/post/2011-06-29-rediriger-stdoutstderr-depuis-un-script-avec-du-pipe/</link>
      <pubDate>Wed, 29 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-06-29-rediriger-stdoutstderr-depuis-un-script-avec-du-pipe/</guid>
      <description>&lt;p&gt;Pour rediriger stdout/stderr à l&amp;rsquo;interieur vers l&amp;rsquo;entrée standard d&amp;rsquo;un
commande, il faut utiliser exec et du sous-shell. Cette astuce est un
bashisme a priori.&lt;/p&gt;
&lt;p&gt;L&amp;rsquo;objectif est de renvoyer tous les messages du script dans syslog sans
mettre de redirection sur la ligne de commande. Le principe général
est :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec FD&amp;gt; &amp;gt;(COMMAND)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;FD est le numéro du file descriptor, 1 pour stdout, 2 pour stderr&lt;/li&gt;
&lt;li&gt;COMMAND est la commande a exécuter, elle doit bien sûr lire les
données en entrée.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Un plus gros exemple :&lt;/p&gt;
&lt;p&gt;{% highlight bash %}
SYSLOG=&amp;ldquo;no&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;load-configuration-file&#34;&gt;Load configuration file&lt;/h1&gt;
&lt;p&gt;CONFIG=/etc/myconfig.conf
if [ -f &amp;ldquo;$CONFIG&amp;rdquo; ]; then
. $CONFIG
fi&lt;/p&gt;
&lt;h1 id=&#34;redirect-output-to-syslog-if-configured&#34;&gt;Redirect output to syslog if configured&lt;/h1&gt;
&lt;p&gt;if [ &amp;ldquo;$SYSLOG&amp;rdquo; = &amp;ldquo;yes&amp;rdquo; ]; then
SYSLOG_FACILITY=${SYSLOG_FACILITY:-local0}
SYSLOG_IDENT=${SYSLOG_IDENT:-postgres}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exec 1&amp;gt; &amp;gt;(logger -t ${SYSLOG_IDENT} -p ${SYSLOG_FACILITY}.info)
exec 2&amp;gt; &amp;gt;(logger -t ${SYSLOG_IDENT} -p ${SYSLOG_FACILITY}.err)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;fi&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
avec dans la configuration :

-   `SYSLOG` : mettre à yes ou no pour activer
-   `SYSLOG_FACILITY` : ou envoyer
-   `SYSLOG_IDENT` : avec quel tag

L&#39;exemple est pris d&#39;un de mes scripts d&#39;archivage pour PostgreSQL, ce
qui permet de logguer dans syslog sans mettre de pipe dans
`archive_command` (ce qu&#39;il ne faut pas faire parce que ça casse : le
code retour donné à PostgreSQL est celui de la dernière commande de la
chaîne de pipe).
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>Combiner des PDF en un seul</title>
      <link>https://www.orgrim.net/post/2011-06-21-combiner-des-pdf-en-un-seul/</link>
      <pubDate>Tue, 21 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-06-21-combiner-des-pdf-en-un-seul/</guid>
      <description>&lt;p&gt;Pour combiner des pdf en un seul, on peut essayer &lt;code&gt;pdfjoin&lt;/code&gt; fournit par
le projet &lt;a href=&#34;http://www2.warwick.ac.uk/fac/sci/statistics/staff/academic-research/firth/software/pdfjam/&#34; title=&#34;pdfjam&#34;&gt;pdfjam&lt;/a&gt;. En attendant que les 250 Mo de dépendances (Latex
principalement) s&amp;rsquo;installent, on peut utiliser ghostscript :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gs -sDEVICE=pdfwrite -dNOPAUSE -dQUIET -dBATCH -sOutputFile=../combined_doc.pdf *.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Merci à &lt;a href=&#34;http://www.perlmonks.org/?node_id=470323&#34;&gt;perlmonks.org&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrouver un trigger à partir du nom de la fonction associée</title>
      <link>https://www.orgrim.net/post/2011-04-07-retrouver-un-trigger-a-partir-du-nom-de-la-fonction-associee/</link>
      <pubDate>Thu, 07 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-04-07-retrouver-un-trigger-a-partir-du-nom-de-la-fonction-associee/</guid>
      <description>&lt;p&gt;Ici encore, tout est dans le catalogue système de PostgreSQL, il suffit
de regarder dans la table &lt;code&gt;pg_trigger&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Avec les jointures qui vont bien, on peut obtenir les informations
intéressantes :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tgname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;trigger&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_trigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tgrelid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_proc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tgfoid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;En ajoutant une clause WHERE, on peut facilement retrouver la table
associée au trigger :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nspname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tgname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;trigger&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_trigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tgrelid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relnamespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_proc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tgfoid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mafonction&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Insérer des tabulations dans sa ligne de commande bash</title>
      <link>https://www.orgrim.net/post/2011-03-24-inserer-des-tabulations-dans-sa-ligne-de-commande-bash/</link>
      <pubDate>Thu, 24 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-24-inserer-des-tabulations-dans-sa-ligne-de-commande-bash/</guid>
      <description>&lt;p&gt;Il y a longtemps que je me demandais comment faire ça, sans prendre la
peine de rechercher ou lire le man. C&amp;rsquo;est chose faite, pour insérer une
tabulation, il faut contourner la complétion de commandes avec le combo
suivant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C-v TAB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C&amp;rsquo;est simple, mais ça ne s&amp;rsquo;invente pas.&lt;/p&gt;
&lt;p&gt;Pour le coup, c&amp;rsquo;est utile quand on veut voir un fichier de configuration
sans les commentaires, par exemple&lt;code&gt; postgresql.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grep -Ev &#39;^(( |        )*#|$)&#39; postgresql.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On doit donc taper une tabulation dans l&amp;rsquo;expression régulière : on
affiche toutes les lignes qui ne satisfont pas la condition « tout ce
qui commence par 0 ou plusieurs espaces ou tabulations suivi d&amp;rsquo;un dièse,
ou une ligne vide ».&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>pg_class.reltuples n&#39;est qu&#39;une approximation du nombre de lignes</title>
      <link>https://www.orgrim.net/post/2011-03-14-pg_classreltuples-nest-quune-approximation-du-nombre-de-lignes/</link>
      <pubDate>Mon, 14 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-14-pg_classreltuples-nest-quune-approximation-du-nombre-de-lignes/</guid>
      <description>&lt;p&gt;Dans le catalogue de PostgreSQL, qui donne plein d&amp;rsquo;information sur le
cluster et la base de données, la table &lt;code&gt;pg_class&lt;/code&gt; regroupe les
informations sur les tables, les séquences, les index, tout ce qui
contient des colonnes, appelé relation. L&amp;rsquo;un des champs disponibles est
&lt;code&gt;reltuples&lt;/code&gt;, il contient le nombre approximatif de lignes dans une
relation. C&amp;rsquo;est &lt;em&gt;approximatif&lt;/em&gt;, ainsi ce n&amp;rsquo;est pas un donnée sure&amp;hellip; La
preuve par l&amp;rsquo;exemple.&lt;/p&gt;
&lt;p&gt;On crée un table avec une colonne de type entier :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db=# CREATE TABLE truc (i int);
CREATE TABLE
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On retrouve ensuite notre table ainsi que la valeur de &lt;code&gt;reltuples&lt;/code&gt; dans
le catalogue système :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db=# SELECT relname, reltuples FROM pg_class WHERE relname = &#39;truc&#39;;
 relname | reltuples 
---------+-----------
 truc    |         0
(1 row)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La table est vide, et &lt;code&gt;reltuples&lt;/code&gt; est à zéro. On insère ensuite quelques
lignes dans cette table :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db=# INSERT INTO dalibo.truc VALUES (1),(2),(3),(4);
INSERT 0 4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On regarde la valeur de &lt;code&gt;reltuples&lt;/code&gt; pour la table après cette
insertion :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db=# SELECT relname, reltuples FROM pg_class WHERE relname = &#39;truc&#39;;
 relname | reltuples 
---------+-----------
 truc    |         0
(1 row)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;reltuples&lt;/code&gt; n&amp;rsquo;est pas à jour, il vaut toujours zéro alors que la table
contient 4 lignes !&lt;/p&gt;
&lt;p&gt;Comme indiqué dans la documentation, &lt;code&gt;reltuples&lt;/code&gt; est mis à jour lors
d&amp;rsquo;un &lt;code&gt;ANALYSE&lt;/code&gt; ou d&amp;rsquo;autres opérations de type DDL :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db=# ANALYZE truc;
ANALYZE
db=# SELECT relname,reltuples FROM pg_class WHERE relname = &#39;truc&#39;;
 relname | reltuples 
---------+-----------
 truc    |         4
(1 row)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et voilà, le passage du &lt;code&gt;ANALYSE&lt;/code&gt; a permis de mettre à jour la valeur de
&lt;code&gt;reltuples&lt;/code&gt; pour la table.&lt;/p&gt;
&lt;p&gt;Conclusion, si on désire supprimer une table parce qu&amp;rsquo;elle est vide, le
moyen sûr est de compter le nombre de lignes dans la table et non pas se
baser sur la valeur de &lt;code&gt;reltuples&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>pkgin adventures - bien générer son pkg_summary</title>
      <link>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-bien-generer-son-pkg_summary/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-bien-generer-son-pkg_summary/</guid>
      <description>&lt;p&gt;Comme indiqué dans d&amp;rsquo;autres posts, j&amp;rsquo;abuse des chroots &lt;code&gt;pkg_comp&lt;/code&gt; pour
tenir mes paquets à jour. Je suis récemment passé à l&amp;rsquo;utilisation de
&lt;code&gt;pkgin&lt;/code&gt; pour la gestion de mes paquets une fois préparés dans le chroot.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pkgin&lt;/code&gt; se base sur &lt;code&gt;pkg_summary&lt;/code&gt; pour connaître toutes les informations
des paquets, nécessaires à sa popotte. Il y a plusieurs façons de créer
un fichier &lt;code&gt;pkg_summary&lt;/code&gt; à donner à &lt;code&gt;pkgin&lt;/code&gt;, mais seule une façon
fonctionne correctement :&lt;/p&gt;
&lt;p&gt;​1. On génère le fichier à partir des paquets déjà installés :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_info -a -X | bzip2 &amp;gt; pkg_summary.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​2. On génère le fichier à partir des tarballs présentes dans
&lt;code&gt;/usr/pkgsrc/packages/All&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/pkgsrc/packages/All
# pkg_info -X *.tgz | bzip2 &amp;gt; pkg_summary.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La méthode 1 n&amp;rsquo;est pas valable car l&amp;rsquo;information sur les tarballs
manque. Ainsi, &lt;code&gt;pkgin&lt;/code&gt; considère les tailles de tarball à 0 comme
valables, ce qui arrive lorsqu&amp;rsquo;un dépôt est injoignable : le fetch
laisse un fichier vide dans le cache que &lt;code&gt;pkgin&lt;/code&gt; considère comme
correct.&lt;/p&gt;
&lt;p&gt;Il faut donc utiliser la méthode 2 pour fournir l&amp;rsquo;information correcte à
&lt;code&gt;pkgin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pour conclure, l&amp;rsquo;investigation autour de ce souci, a permis aux
développeurs du projet d&amp;rsquo;ajouter :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un mode verbose pour avoir plein d&amp;rsquo;informations utiles&lt;/li&gt;
&lt;li&gt;Un message d&amp;rsquo;avertissement lorsque &lt;code&gt;pkgin&lt;/code&gt; rencontre un paquet à
avec une taille à 0&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>pkgin adventures - conflit résolu</title>
      <link>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-conflit-resolu/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-conflit-resolu/</guid>
      <description>&lt;p&gt;Il y a quelques jours, il a été décidé de remplacer &lt;code&gt;libungif&lt;/code&gt; par
&lt;code&gt;giflib&lt;/code&gt; dans pkgsrc. Pour éviter de mixer les deux et donc avoir des
problèmes, les deux paquets se déclarent mutuellement en conflit. A
partir de maintenant la dépendance par défaut est sur &lt;code&gt;giflib&lt;/code&gt;, ce qui a
donc fait que ma mise à jour (&lt;code&gt;pkg_chk&lt;/code&gt; dans un &lt;code&gt;pkg_comp&lt;/code&gt;) a tellement
buté dessus que j&amp;rsquo;ai décidé qu&amp;rsquo;il serait plus simple de repartir d&amp;rsquo;un
chroot &lt;code&gt;pkg_comp&lt;/code&gt; tout neuf&amp;hellip;&lt;/p&gt;
&lt;p&gt;Même si j&amp;rsquo;avais oublié de retirer &lt;code&gt;libungif&lt;/code&gt; de mon
&lt;code&gt;/usr/pkgsrc/pkgchk.conf&lt;/code&gt; au début, j&amp;rsquo;ai bien obtenu un dépôt tout neuf
pour &lt;code&gt;pkgin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Et là, la magie de &lt;code&gt;pkgin&lt;/code&gt; a opéré :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkgin up
processing local summary...
updating database: 100%
downloading pkg_summary.bz2:    0Bbps 100%
processing remote summary (file:///usr/pkgsrc/packages/amd64/All)...
updating database: 100%

# pkgin fug
calculating dependencies... done.
giflib-4.1.6 (to be installed) conflicts with installed package libungif-4.1.4nb1.
proceed ? [y/N] n

# pkgin srd libungif
local reverse dependency tree for libungif
        feh-1.3.4nb8
        giblib-1.2.4nb9
        python-mode-1.0nb1
        php-mode-1.4.0nb1
        mplayer-1.0rc20100913nb5
        emacs-23.2nb4
        imlib2-1.4.2nb6

# pkgin rm libungif
8 packages to delete: mplayer-1.0rc20100913nb5 php-mode-1.4.0nb1 python-mode-1.0nb1
 feh-1.3.4nb8 emacs-23.2nb4 giblib-1.2.4nb9 imlib2-1.4.2nb6 libungif-4.1.4nb1
proceed ? [y/N] y
....

# pkgin in feh emacs php-mode python-mode mplayer
...

# pkgin fug
calculating dependencies... done.

21 packages to be upgraded: epdfview-0.1.7nb10 mercurial-1.8 scmgit-base-1.7.3.5
scmgit-docs-1.7.3.5 poppler-glib-0.16.2 libgnome-2.32.0nb2 libgnomeui-2.24.4nb2
poppler-glib-0.16.2 poppler-utils-0.16.2 t1lib-5.1.2nb1 gtk2+-2.22.1nb1
tex-dvipdfm-0.13.2dnb3 curl-7.21.3 glib2-2.26.1nb2 gnutls-2.10.4 libksba-1.1.0
dialog-1.1.20110118 libidn-1.19 luatex-0.65.0nb1 web2c-2010nb6 poppler-0.16.2

21 packages to be installed: poppler-0.16.3 dialog-1.1.20110302 libidn-1.20
luatex-0.65.0nb2 web2c-2010nb7 curl-7.21.4 glib2-2.28.2 gnutls-2.10.5nb1 libksba-1.2.0
gtk2+-2.24.1 tex-dvipdfm-0.13.2dnb4 poppler-glib-0.16.3 libgnome-2.32.1
libgnomeui-2.24.5 poppler-glib-0.16.3 poppler-utils-0.16.3 t1lib-5.1.2nb2
epdfview-0.1.7nb11 mercurial-1.8.1 scmgit-base-1.7.4.1 scmgit-docs-1.7.4.1
(40M to download, 292M to install)

proceed ? [y/N] y
...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et hop, résolution du conflit à la main, certes, mais &lt;!-- raw HTML omitted --&gt;très
facilement&lt;!-- raw HTML omitted --&gt; et avec &lt;!-- raw HTML omitted --&gt;un seul outil&lt;!-- raw HTML omitted --&gt;. Sans &lt;code&gt;pkgin&lt;/code&gt;,
j&amp;rsquo;aurais du itérer à coup de &lt;code&gt;pkg_info -R&lt;/code&gt;, &lt;code&gt;pkg_delete&lt;/code&gt; et
&lt;code&gt;pkg_chk -ub&lt;/code&gt;&amp;hellip; Parce &lt;code&gt;pkgin&lt;/code&gt; ressort tout l&amp;rsquo;arbre des dépendances :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; # pkg_info -R giflib
Information for giflib-4.1.6:

Required by:
imlib2-1.4.2nb7
emacs-23.2nb5
mplayer-1.0rc20100913nb6


# pkgin srd giflib
local reverse dependency tree for giflib
        feh-1.3.4nb8
        giblib-1.2.4nb9
        python-mode-1.0nb1
        php-mode-1.4.0nb1
        mplayer-1.0rc20100913nb6
        emacs-23.2nb5
        imlib2-1.4.2nb7
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pkgin adventures - utiliser pkgin avec pkgsrc-current</title>
      <link>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-utiliser-pkgin-avec-pkgsrc-current/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-12-pkgin-adventures-utiliser-pkgin-avec-pkgsrc-current/</guid>
      <description>&lt;p&gt;&lt;strong&gt;pkgin&lt;/strong&gt; est un outil de gestion de paquets binaires pour pkgsrc, le
système de paquets de NetBSD. Pour pouvoir l&amp;rsquo;utiliser il faut donc des
paquets binaires, sauf que les binaires ne sont officiellement
disponibles que pour les releases trimestrielles de pkgsrc. Quand on
suit pkgsrc-current, il faut donc compiler les paquets et fabriquer un
dépôt.&lt;/p&gt;
&lt;p&gt;La solution consiste donc à utiliser l&amp;rsquo;équipe habituelle pour compiler
les paquets sans gêner le système : &lt;code&gt;pkg_comp&lt;/code&gt; et &lt;code&gt;pkg_chk&lt;/code&gt;. Pour le
dépôt on a simplement besoin d&amp;rsquo;un serveur web pour les mettre à
disposition.&lt;/p&gt;
&lt;p&gt;Voici un petit résumé de la procédure :&lt;/p&gt;
&lt;p&gt;​1. A partir d&amp;rsquo;une machine ayant l&amp;rsquo;ensemble de ses paquets déjà
installés, on met en place un chroot &lt;code&gt;pkg_comp&lt;/code&gt; comme indiqué &lt;a href=&#34;http://wiki.orgrim.net/netbsd/pkgsrc/pkg_comp&#34;&gt;sur le
wiki&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;​2. On génère la liste des paquets à construire à partir des paquets
installé avec &lt;code&gt;pkg_chk&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_chk -g
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​3. On les compile dans le chroot :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_comp build pkgtools/pkg_chk
# pkg_comp chroot pkg_chk -ua
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​4. On génère le fichier &lt;code&gt;pkg_summary&lt;/code&gt; qui va bien :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# cd /usr/pkgsrc/packages/All
# pkg_info -X *.tgz | bzip2 &amp;gt; pkg_summary.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​5. On ajoute le définition du dépôt local dans la configuration de
&lt;code&gt;pkgin&lt;/code&gt;, en éditant &lt;code&gt;/usr/pkg/etc/pkgin/repositories.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file:///usr/pkgsrc/packages/All
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On peut enfin utiliser &lt;code&gt;pkgin&lt;/code&gt; pour ajouter et supprimer des paquets. Il
suffit de regénérer le &lt;code&gt;pkg_summary&lt;/code&gt; à chaque nouvelle compilation de
paquet dans le chroot.&lt;/p&gt;
&lt;p&gt;Pour l&amp;rsquo;upgrade, il faut pouvoir ne garder que les paquets les plus à
jour dans le dépôt, pour cela l&amp;rsquo;outil &lt;code&gt;pkg_tarup&lt;/code&gt; entre en jeu, il
permet de générer les paquets binaires à partir de l&amp;rsquo;installation
courante.&lt;/p&gt;
&lt;p&gt;Après une upgrade avec &lt;code&gt;pkg_chk&lt;/code&gt; dans le chroot, on peut mettre à jour
le dépôt :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_comp build pkgtools/pkg_tarup
# rm /usr/pkgsrc/packages/All/*
# pkg_comp chroot pkg_tarup -a -d /usr/pkgsrc/packages/All \\&#39;*\\&#39;
# cd /usr/pkgsrc/packages/All
# pkg_info -X *.tgz | bzip2 &amp;gt; pkg_summary.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, pour mettre à jour avec &lt;code&gt;pkgin&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkgin up
# pkgin fug
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>pkgsrc, pkg_comp et ccache</title>
      <link>https://www.orgrim.net/post/2011-03-04-pkgsrc-pkg_comp-et-ccache/</link>
      <pubDate>Fri, 04 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-04-pkgsrc-pkg_comp-et-ccache/</guid>
      <description>&lt;p&gt;Pour utiliser ccache dans un chroot &lt;code&gt;pkg_comp&lt;/code&gt;, on commence par installer
ccache :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pkg_comp build devel/ccache
# pkg_add /usr/pkgsrc/packages/All/ccache-3.1.4.tgz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;En utilisant la cible &lt;code&gt;package-install&lt;/code&gt; dans le chroot, ccache s&amp;rsquo;y
trouve installé. On l&amp;rsquo;installe aussi sur le système pour surveiller les
statistiques plus tard.&lt;/p&gt;
&lt;p&gt;Ensuite, on édite le &lt;code&gt;etc/mk.conf&lt;/code&gt; du chroot, par exemple
&lt;code&gt;/local/pkg_comp/default/etc/mk.conf&lt;/code&gt;, pour y définir les variables
suivantes :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ...
# fin de la conf speciale pkg_comp

CCACHE_DIR=${WRKOBJDIR}/.ccache
PKGSRC_COMPILER = ccache gcc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On créé ensuite le répertoire du cache, si le chemin du chroot est
&lt;code&gt;/local/pkg_comp/default&lt;/code&gt;, avec la variable &lt;code&gt;WRKOBJDIR&lt;/code&gt; laissée par
défaut :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /local/pkg_comp/default/pkg_comp/obj/pkgsrc/.ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ensuite, il suffit de compiler ses packages comme d&amp;rsquo;habitude.&lt;/p&gt;
&lt;p&gt;Enfin, on peut suivre les statistiques du cache avec la commande
suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# CCACHE_DIR=/local/pkg_comp/default/pkg_comp/obj/pkgsrc/.ccache ccache -s
cache directory                     /local/pkg_comp/default/pkg_comp/obj/pkgsrc/.ccache
cache hit                            133
cache miss                          3053
called for link                      383
compile failed                        43
preprocessor error                    34
autoconf compile/link                388
unsupported compiler option          216
no input file                         55
files in cache                      6201
cache size                          58.7 Mbytes
max cache size                    1024.0 Mbytes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;P.S. : Une doc pour mettre en place un chroot &lt;code&gt;pkg_comp&lt;/code&gt; est disponible
&lt;a href=&#34;http://wiki.orgrim.net/netbsd/pkgsrc/pkg_comp&#34;&gt;sur le wiki&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DNSSEC et Bind sur NetBSD</title>
      <link>https://www.orgrim.net/post/2011-03-03-dnssec-et-bind-sur-netbsd/</link>
      <pubDate>Thu, 03 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-03-03-dnssec-et-bind-sur-netbsd/</guid>
      <description>&lt;p&gt;En reconfigurant ma gateway sur NetBSD, le serveur Bind fournit dans
« basesys » refusait de fonctionner à cause de l&amp;rsquo;activation de DNSSEC
par défaut.&lt;/p&gt;
&lt;p&gt;Pour le désactiver, il suffit de modifier les paramètres
suivants dans &lt;code&gt;/etc/named.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;options {
        # ...

        dnssec-enable no;
        dnssec-validation no;
#        dnssec-lookaside auto;

        # ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mais ce n&amp;rsquo;est pas la solution idéale, sachant que DNSSEC est activé sur
la zone root depuis juin 2010, autant l&amp;rsquo;utiliser. Pour avoir DNSSEC dans
le Bind du basesys, il manque juste la configuration des clés. On
récupère la DNSKEY de la zone root avec la commande qui va bien :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dig +dnssec +multiline . dnskey &amp;gt; /chemin/vers/root_dnskey
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On obtient la clé qu&amp;rsquo;il faut vérifier, on génère donc l&amp;rsquo;enregistrement
DS correspondant :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dnssec-dsfromkey -2 -f /chemin/vers/root_dnskey .
. IN DS 19036 8 2 49AAC11D7B6F6446702E54A1607371607A1A41855200FD2CE1CDDE32 F24E8FB5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Attention :&lt;/strong&gt; le dernier espace doit être ignoré.&lt;/p&gt;
&lt;p&gt;On compare donc à ce que fournit l&amp;rsquo;IANA
(&lt;a href=&#34;http://data.iana.org/root-anchors/root-anchors.xml&#34;&gt;http://data.iana.org/root-anchors/root-anchors.xml&lt;/a&gt;) et d&amp;rsquo;autres
comme Kirei (&lt;a href=&#34;http://www.kirei.se/en/2010/06/20/root-ksk/&#34;&gt;http://www.kirei.se/en/2010/06/20/root-ksk/&lt;/a&gt;) qui
fournissent également les signatures PGP à vérifier.&lt;/p&gt;
&lt;p&gt;Quand c&amp;rsquo;est bon (GPG dit OK), on ajoute un bloc &lt;code&gt;managed-keys&lt;/code&gt; avec le
contenu de l&amp;rsquo;enregistrement DNSKEY de la zone root dans
&lt;code&gt;/etc/named.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;options {
        # ...

        dnssec-enable yes;
        dnssec-validation yes;
        dnssec-lookaside auto;
        managed-keys-directory &amp;quot;keys&amp;quot;;

        # ...
};

managed-keys {
        &amp;quot;.&amp;quot; initial-key 257 3 8 &amp;quot;AwEAAagAIKlVZrp...&amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour bénéficier du « look aside », c&amp;rsquo;est à dire une autre source de
vérification des données du DNS, il faut ajouter la clé sur service DLV
de ISC (l&amp;rsquo;organisation qui code Bind), en récupérant la clé là :
&lt;a href=&#34;https://www.isc.org/solutions/dlv&#34;&gt;https://www.isc.org/solutions/dlv&lt;/a&gt; et après vérification des
signatures PGP, on peut ajouter un bloc &lt;code&gt;trusted-keys&lt;/code&gt; à
&lt;code&gt;/etc/named.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;trusted-keys {
        dlv.isc.org. 257 3 5 &amp;quot;BEAAAAP...&amp;quot;;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Avant de relancer le service, on peut configurer des logs (voir le
&lt;a href=&#34;http://wiki.orgrim.net/netbsd/named#configurer-les-logs&#34;&gt;wiki&lt;/a&gt; pour les logs dans le chroot) pour mettre du debug sur la
partie DNSSEC :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;logging {
        # ...
        channel dnssec_log_file {
                file &amp;quot;/var/log/dnssec.log&amp;quot; versions 3 size 20m;
                severity debug 3;
                print-category yes;
                print-severity yes;
                print-time yes;
        };

        category dnssec { dnssec_log_file; };
        # ...
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et corriger quelques permissions :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mkdir /etc/namedb/keys
# chown named:named /etc/namedb/keys
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, on peut redémarrer le service et surveiller les logs :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /etc/rc.d/named restart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour tester, on utilise &lt;code&gt;dig&lt;/code&gt; sur zone signée :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# dig +dnssec +multiline net

; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.7.2-P3 &amp;lt;&amp;lt;&amp;gt;&amp;gt; +dnssec +multiline net
;; global options: +cmd
;; Got answer:
;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: NOERROR, id: 5595
;; flags: qr rd ra ad; QUERY: 1, ANSWER: 0, AUTHORITY: 4, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags: do; udp: 4096
;; QUESTION SECTION:
;net.                   IN A

;; AUTHORITY SECTION:
net.                    518 IN SOA a.gtld-servers.net. nstld.verisign-grs.com. (
                                1299183189 ; serial
                                1800       ; refresh (30 minutes)
                                900        ; retry (15 minutes)
                                604800     ; expire (1 week)
                                86400      ; minimum (1 day)
                                )
net.                    518 IN RRSIG SOA 8 1 900 20110310201309 (
                                20110303200309 3980 net.
                                TUwUOfzcgGN/lXERU2Y+l3xMr8h6cg/t7ODOiGh8wSNq
                                8zOEvaTYeR+aKY76mY9X1d+odTcHv52ewLs0nQLlvzFb
                                iz48fxJrWoNKz5D1HxYDJGNqAsxh3usX0xxnNQoM0cIm
                                vvw5uFWxFK8cJ0Xha1s4Rpd2z2gVse3yZB3kU78= )
A1RT98BS5QGC9NFI51S9HCI47ULJG6JH.net. 518 IN RRSIG NSEC3 8 2 86400 20110310193846 (
                                20110303192846 3980 net.
                                IhkKHupik3uQMq94xJQqaLmTeXPCeROIdcicFRh5ocsP
                                Mzfm/sO+9MpPdPpffCeCg3TtPxHhln6N0ffUa5jNoNnK
                                kmxZTqF6OUPnW7+pUm2kIysZxjOR5wK4n40IyTj8QNWZ
                                DspTJTVV7v/4RHgqnoHo2vHcZvLR744Y8PDEBH4= )
A1RT98BS5QGC9NFI51S9HCI47ULJG6JH.net. 518 IN NSEC3 1 1 0 - A25R64HGRKT76GSK0JS1PNJ44MEELOJ6 NS SOA RRSIG DNSKEY NSEC3PARAM

;; Query time: 12 msec
;; SERVER: 127.0.0.1#53(127.0.0.1)
;; WHEN: Thu Mar  3 21:20:00 2011
;; MSG SIZE  rcvd: 511
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le flag &lt;strong&gt;ad&lt;/strong&gt; indique que la réponse est valide selon DNSSEC.&lt;/p&gt;
&lt;p&gt;On voit des trucs du genre dans les logs :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;03-Mar-2011 18:22:12.734 dnssec: debug 3: validating @0xba5c7000: net DS: starting
03-Mar-2011 18:22:12.735 dnssec: debug 3: validating @0xba5c7000: net DS: attempting positive response validation
03-Mar-2011 18:22:12.738 dnssec: debug 3: validating @0xba5ca000: . NS: starting
03-Mar-2011 18:22:12.739 dnssec: debug 3: validating @0xba5ca000: . NS: attempting insecurity proof
03-Mar-2011 18:22:12.739 dnssec: debug 3: validating @0xba5ca000: . NS: insecurity proof failed
03-Mar-2011 18:22:12.740 dnssec: info: validating @0xba5ca000: . NS: got insecure response; parent indicates it should be secure
03-Mar-2011 18:22:12.740 dnssec: debug 3: validator @0xba5ca000: dns_validator_destroy
03-Mar-2011 18:22:12.778 dnssec: debug 3: validating @0xba5ca000: . DNSKEY: starting
03-Mar-2011 18:22:12.779 dnssec: debug 3: validating @0xba5ca000: . DNSKEY: attempting insecurity proof
03-Mar-2011 18:22:12.779 dnssec: debug 3: validating @0xba5ca000: . DNSKEY: insecurity proof failed
03-Mar-2011 18:22:12.779 dnssec: info: validating @0xba5ca000: . DNSKEY: got insecure response; parent indicates it should be secure
03-Mar-2011 18:22:12.779 dnssec: debug 3: validator @0xba5ca000: dns_validator_destroy
03-Mar-2011 18:22:12.791 dnssec: debug 3: validating @0xba5ca000: . NS: starting
03-Mar-2011 18:22:12.792 dnssec: debug 3: validating @0xba5ca000: . NS: attempting positive response validation
03-Mar-2011 18:22:12.988 dnssec: debug 3: validating @0xba5c4000: . DNSKEY: starting
03-Mar-2011 18:22:12.988 dnssec: debug 3: validating @0xba5c4000: . DNSKEY: attempting positive response validation
03-Mar-2011 18:22:13.002 dnssec: debug 3: validating @0xba5c4000: . DNSKEY: verify rdataset (keyid=19036): success
03-Mar-2011 18:22:13.002 dnssec: debug 3: validating @0xba5c4000: . DNSKEY: signed by trusted key; marking as secure
03-Mar-2011 18:22:13.002 dnssec: debug 3: validator @0xba5c4000: dns_validator_destroy
03-Mar-2011 18:22:13.003 dnssec: debug 3: validating @0xba5ca000: . NS: in fetch_callback_validator
03-Mar-2011 18:22:13.003 dnssec: debug 3: validating @0xba5ca000: . NS: keyset with trust 8
03-Mar-2011 18:22:13.003 dnssec: debug 3: validating @0xba5ca000: . NS: resuming validate
03-Mar-2011 18:22:13.006 dnssec: debug 3: validating @0xba5ca000: . NS: verify rdataset (keyid=21639): success
03-Mar-2011 18:22:13.006 dnssec: debug 3: validating @0xba5ca000: . NS: marking as secure, noqname proof not needed
03-Mar-2011 18:22:13.006 dnssec: debug 3: validator @0xba5ca000: dns_validator_destroy
03-Mar-2011 18:22:13.008 dnssec: debug 3: validating @0xba5c7000: net DS: in fetch_callback_validator
03-Mar-2011 18:22:13.008 dnssec: debug 3: validating @0xba5c7000: net DS: keyset with trust 8
03-Mar-2011 18:22:13.008 dnssec: debug 3: validating @0xba5c7000: net DS: resuming validate
03-Mar-2011 18:22:13.011 dnssec: debug 3: validating @0xba5c7000: net DS: verify rdataset (keyid=21639): success
03-Mar-2011 18:22:13.011 dnssec: debug 3: validating @0xba5c7000: net DS: marking as secure, noqname proof not needed
03-Mar-2011 18:22:13.011 dnssec: debug 3: validator @0xba5c7000: dns_validator_destroy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;On voit bien, que lors de la vérification de la signature de &lt;em&gt;net&lt;/em&gt;, Bind
commence par vérifier &lt;em&gt;.&lt;/em&gt; (la zone root) et que ça marche.&lt;/p&gt;
&lt;p&gt;PS : ne pas oublier de (re)mettre la verbosité des logs à &lt;em&gt;info&lt;/em&gt; après
coup.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Accès SSH externe sur une gateway NetBSD</title>
      <link>https://www.orgrim.net/post/2011-02-26-acces-ssh-externe-sur-une-gateway-netbsd/</link>
      <pubDate>Sat, 26 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-26-acces-ssh-externe-sur-une-gateway-netbsd/</guid>
      <description>&lt;p&gt;Pour permettre l&amp;rsquo;accès à la gateway depuis Internet avec un maximum de
sécurité, j&amp;rsquo;ai configuré le serveur OpenSSH (fournit dans basesys) et PF
pour :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N&amp;rsquo;autoriser l&amp;rsquo;accès que par clé publique&lt;/li&gt;
&lt;li&gt;Empêcher les attaques par force brute sur le serveur&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La configuration d&amp;rsquo;OpenSSH peut se faire de deux façon :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On désactive l&amp;rsquo;authentification par mot de passe et l&amp;rsquo;utilisation de
PAM pour que la méthode keyboard-ineractive ne laisse rien passer&lt;/li&gt;
&lt;li&gt;On désactive l&amp;rsquo;authentification par mot de passe et le
challenge/respone pour garder l&amp;rsquo;utilisation de PAM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;J&amp;rsquo;ai choisi la 2ème méthode qui permet de garder la fonctionnalité de
pam_nologin (seul root peut se logguer si &lt;code&gt;/etc/nologin&lt;/code&gt; existe, en
modifiant &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PermitRootLogin no
PasswordAuthentication no
ChallengeResponseAuthentication no
UsePam yes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ainsi, l&amp;rsquo;authentification par mot de passe est totalement désactivée.&lt;/p&gt;
&lt;p&gt;Pour empêcher les attaques par force brute sur le serveur, on configure
PF de cette façon :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Il faut une table pour enregistrer les IP à bannir&lt;/li&gt;
&lt;li&gt;On utilise l&amp;rsquo;option &lt;code&gt;max-src-conn-rate&lt;/code&gt; sur la règle qui ouvre le
port de SSH : pas plus de deux connexions dans un intervalle de dix
secondes par IP.&lt;/li&gt;
&lt;li&gt;On ajoute une règle pour bloquer les IP présentes de la table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Les règles PF, à placer dans &lt;code&gt;/etc/pf.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;table &amp;lt;ssh_bans&amp;gt; persist

# allow ssh on the external interface, limit to connections in ten seconds
pass in on $ext_if inet proto tcp to ($ext_if) port ssh \\
    keep state (max-src-conn-rate 2/10, overload &amp;lt;ssh_bans&amp;gt; flush)

# reject banned ip from connectiong to ssh port
block return in on $ext_if inet proto tcp from &amp;lt;ssh_bans&amp;gt; to ($ext_if) port ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour surveiller, on utilise les options de manipulation des tables de
&lt;code&gt;pfctl&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# pfctl -t ssh_bans -T show
# pfctl -t ssh_bans -T add X.Y.Z.T
# pfctl -t ssh_bans -T delete X.Y.Z.T
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enfin, un petit thread qui explique à quoi sert le challenge/response et la méthode keyboard-interactive : &lt;a href=&#34;http://groups.google.com/group/comp.security.ssh/browse_thread/thread/c483316ac6abcb74&#34;&gt;http://groups.google.com/group/comp.security.ssh/browse_thread/thread/c483316ac6abcb74&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Voir tous les champs d&#39;une table</title>
      <link>https://www.orgrim.net/post/2011-02-25-voir-tous-les-champs-dune-table/</link>
      <pubDate>Fri, 25 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-25-voir-tous-les-champs-dune-table/</guid>
      <description>&lt;p&gt;Avec PostgreSQL, on peut utiliser la requête suivante pour obtenir la
taille de chacune des bases de données d&amp;rsquo;un cluster :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;datname&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;base&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;pg_size_pretty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pg_database_size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;AS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;taille&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_database&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Qui donne par exemple :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         base          | taille  
-----------------------+---------
 template0             | 5273 kB
 postgres              | 5385 kB
 redmine               | 9057 kB
 roundcube             | 9153 kB
 template1             | 5369 kB
 dotclear              | 6833 kB
 dspam                 | 204 MB
 exim                  | 5649 kB
 (8 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Mais comment est-ce possible ? on a appliqué la fonction
&lt;code&gt;pg_database_size()&lt;/code&gt; sur une colonne appelée &lt;code&gt;oid&lt;/code&gt;, alors que la
définition de &lt;code&gt;pg_database&lt;/code&gt; est la suivante :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=# \\d pg_database
    Table &amp;quot;pg_catalog.pg_database&amp;quot;
    Column     |   Type    | Modifiers 
---------------+-----------+-----------
 datname       | name      | not null
 datdba        | oid       | not null
 encoding      | integer   | not null
 datcollate    | name      | not null
 datctype      | name      | not null
 datistemplate | boolean   | not null
 datallowconn  | boolean   | not null
 datconnlimit  | integer   | not null
 datlastsysoid | oid       | not null
 datfrozenxid  | xid       | not null
 dattablespace | oid       | not null
 datacl        | aclitem[] | 
Indexes:
    &amp;quot;pg_database_datname_index&amp;quot; UNIQUE, btree (datname), tablespace &amp;quot;pg_global&amp;quot;
    &amp;quot;pg_database_oid_index&amp;quot; UNIQUE, btree (oid), tablespace &amp;quot;pg_global&amp;quot;
Tablespace: &amp;quot;pg_global&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Il n&amp;rsquo;y a pas de colonne &lt;code&gt;oid&lt;/code&gt; dans cette table ! Et pourtant&amp;hellip; Cette
colonne est tout simplement cachée, mais elle existe bel et bien. Pour
vérifier, on recherche donc dans le catalogue système la liste des
champs de la table :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;typname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;attnum&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_attribute&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_class&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;attrelid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;JOIN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pg_type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ON&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;oid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;atttypid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;relname&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pg_database&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Qui donne :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    attname    | typname  | attnum 
---------------+----------+--------
 tableoid      | oid      |     -7
 cmax          | cid      |     -6
 xmax          | xid      |     -5
 cmin          | cid      |     -4
 xmin          | xid      |     -3
 oid           | oid      |     -2
 ctid          | tid      |     -1
 datname       | name     |      1
 datdba        | oid      |      2
 encoding      | int4     |      3
 datcollate    | name     |      4
 datctype      | name     |      5
 datistemplate | bool     |      6
 datallowconn  | bool     |      7
 datconnlimit  | int4     |      8
 datlastsysoid | oid      |      9
 datfrozenxid  | xid      |     10
 dattablespace | oid      |     11
 datacl        | _aclitem |     12
(19 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La colonne &lt;code&gt;attnum&lt;/code&gt; de &lt;code&gt;pg_attribute&lt;/code&gt; indique la position de la colonne,
on remarque ainsi qu&amp;rsquo;il y a sept colonnes avec une position négative.
Ces colonnes ne sont pas montrés par la commande &lt;code&gt;\\d&lt;/code&gt; de psql, ce sont
les colonnes système de la table (plus d&amp;rsquo;information sur ce qu&amp;rsquo;elles
représentent dans la &lt;a href=&#34;http://docs.postgresql.fr/9.0/ddl-system-columns.html&#34;&gt;doc&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;En plus, on a encore utilisé cette colonne &lt;code&gt;oid&lt;/code&gt; pour la retrouver dans
la table&amp;hellip; Maintenant, on peut être rassuré sur le catalogue système,
ce n&amp;rsquo;est qu&amp;rsquo;un ensemble de tables, auxquelles on accède en SQL
standard&amp;hellip;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Recréer une séquence</title>
      <link>https://www.orgrim.net/post/2011-02-22-recreer-une-sequence/</link>
      <pubDate>Tue, 22 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-22-recreer-une-sequence/</guid>
      <description>&lt;p&gt;On peut faire ça dans 2 cas :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On a fait n&amp;rsquo;importe quoi, et la séquence a disparu :-(&lt;/li&gt;
&lt;li&gt;On veut transformer une colonne en « SERIAL »&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ROLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owner_de_la_table&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;--  ?column?
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- ----------
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;--       155
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;-- (1 row)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;-- On prend donc « max(id)+1 » comme valeur de départ de la séquence
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;CREATE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SEQUENCE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latable_id_seq&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;START&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;155&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OWNED&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;latable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Pour lier la séquence à la table (et ainsi l&amp;rsquo;utiliser lors d&amp;rsquo;INSERT par
exemple) :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;k&#34;&gt;BEGIN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;TABLE&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;schema&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;latable&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;ALTER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;COLUMN&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;SET&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;DEFAULT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NEXTVAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;latable_id_seq&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regclass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Choisir des sources d&#39;entropie pour /dev/[u]random</title>
      <link>https://www.orgrim.net/post/2011-02-22-choisir-des-sources-dentropie-pour-devurandom/</link>
      <pubDate>Thu, 30 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-22-choisir-des-sources-dentropie-pour-devurandom/</guid>
      <description>&lt;p&gt;Pour monter un service DNS on a besoin de &lt;code&gt;/dev/random&lt;/code&gt; pour générer la
clé rndc. Sans collecte d&amp;rsquo;entropie, &lt;code&gt;/dev/random&lt;/code&gt; ne crache rien.&lt;/p&gt;
&lt;p&gt;La preuve sur un domU Xen en NetBSD 5.1 (le dom0 suit 5-stable), donnée par
&lt;code&gt;ktruss&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fourche ~ # ktruss rndc-confgen -a -t /var/chroot/named
[...]
   519      1 rndc-confgen open(&amp;quot;/dev/random&amp;quot;, 0x4, 0) = 3
[...]
   519      1 rndc-confgen read(0x3, 0xbf7fe4a8, 0x10) Err#35 EAGAIN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Le &lt;code&gt;read()&lt;/code&gt; attend gentiment que &lt;code&gt;/dev/random&lt;/code&gt; lui fournisse du nombre
aléatoire pendant que celui-ci dit de revenir plus tard. La raison est
simple, aucune source d&amp;rsquo;entropie n&amp;rsquo;est configurée pour la collecte sur
le domU, comme l&amp;rsquo;indique &lt;code&gt;rndctl&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fourche ~ # rndctl -l
Source                 Bits Type      Flags
xennet1                   0 net  
xennet0                   0 net  
xbd0                      0 disk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Et les stats ne sont pas glorieuses :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fourche ~ # rndctl -s    
               51 bits mixed into pool
                0 bits currently stored in pool (max 4096)
                0 bits of entropy discarded due to full pool
               51 hard-random bits generated
            16749 pseudo-random bits generated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Après une lecture du man de rndctl, on active tout :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fourche ~ # rndctl -ce -d xennet1
fourche ~ # rndctl -ce -d xennet0
fourche ~ # rndctl -ce -d xbd0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ça va tout de suite mieux, &lt;code&gt;rndc-confgen&lt;/code&gt; termine, et on a des « bits »
qui commencent à remplir le « pool » :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fourche ~ # rndctl -ls
Source                 Bits Type      Flags
xennet1                   0 net  estimate, collect
xennet0                  80 net  estimate, collect
xbd0                      0 disk estimate, collect
              133 bits mixed into pool
               80 bits currently stored in pool (max 4096)
                0 bits of entropy discarded due to full pool
               53 hard-random bits generated
            17003 pseudo-random bits generated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pour avoir ça activé au boot, dans &lt;code&gt;/etc/rc.conf&lt;/code&gt; :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rndctl=YES
rndctl_flags=&amp;quot;xbd0; -c -t net&amp;quot; # Voir les commentaires dans /etc/rc.d/rndctl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Reste à découvrir pourquoi ce n&amp;rsquo;est pas activé par défaut en domU&amp;hellip;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Dual boot Debian/NetBSD</title>
      <link>https://www.orgrim.net/post/2011-02-23-dual-boot-debiannetbsd/</link>
      <pubDate>Mon, 29 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://www.orgrim.net/post/2011-02-23-dual-boot-debiannetbsd/</guid>
      <description>&lt;p&gt;L&amp;rsquo;installation d&amp;rsquo;un dual boot Linux/BSD est somme toute assez simple, on
coupe le disque en deux et on installe les systèmes l&amp;rsquo;un après l&amp;rsquo;autre.
La seule difficulté reste sur l&amp;rsquo;installation/configuration des
bootloaders.&lt;/p&gt;
&lt;p&gt;Voici comment j&amp;rsquo;ai installé mon laptop en dual boot Debian/NetBSD.
D&amp;rsquo;abord, quelques principes/astuces:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux s&amp;rsquo;installe dans différentes partitions DOS&lt;/li&gt;
&lt;li&gt;NetBSD installe ses partitions à l&amp;rsquo;intérieur d&amp;rsquo;une partition DOS qui
lui est dédiée&lt;/li&gt;
&lt;li&gt;On peut partager la swap entre les deux systèmes&lt;/li&gt;
&lt;li&gt;On installe d&amp;rsquo;abord Linux et on utilise du LVM pour éviter de créer
des partitions étendues&lt;/li&gt;
&lt;li&gt;GRUB sera le boot loader principal et on chainload&amp;rsquo;era le boot
loader de NetBSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Table des partitions DOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Part 1: /boot (100Mb) - type Linux&lt;/li&gt;
&lt;li&gt;Part 2: swap (taille de la RAM) - type Swap&lt;/li&gt;
&lt;li&gt;Part 3: LVM (moitié du reste) - type Linux LVM&lt;/li&gt;
&lt;li&gt;Part 4: NetBSD (le reste) - type NetBSD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Etapes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Installer Debian (on prend une squeeze avec grub2)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Installer NetBSD&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Booter NetBSD et lancer:
&lt;code&gt;installboot -v /dev/rwd0a /usr/mdec/bootxx_ffsv1&lt;/code&gt; (wd0a est la
partition / et commence au début de la partition DOS allouée à
NetBSD)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebooter sur le mode Rescue de Debian:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Choisir son root fs et executer un shell dedans&lt;/li&gt;
&lt;li&gt;Monter tous les FS: &lt;code&gt;mount -t ext3 -a&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Editer &lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt; (voir plus bas) :&lt;/li&gt;
&lt;li&gt;Lancer: &lt;code&gt;grub-install&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rebooter et vérifier que tout est bien accessible&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;/etc/grub.d/40_custom&lt;/code&gt; :&lt;/p&gt;
&lt;p&gt;{% highlight bash %}
#!/bin/sh
exec tail -n +3 $0
menuentry &amp;ldquo;NetBSD&amp;rdquo; {
set root=(hd0,4)
chainloader +1
}&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>